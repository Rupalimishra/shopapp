{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"../val","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}},{"name":"fbjs/lib/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/inherits\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _val = _$$_REQUIRE(_dependencyMap[6], \"../val\");\n\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\"));\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"fbjs/lib/invariant\"));\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX = 0;\n    var currentT = 0;\n    var i = 0;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  }\n\n  function bezier(mX1, mY1, mX2, mY2) {\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n\n      --currentSample;\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x;\n      }\n\n      if (x === 0) {\n        return 0;\n      }\n\n      if (x === 1) {\n        return 1;\n      }\n\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n\n  var AnimatedBezier = function (_AnimatedNode) {\n    (0, _inherits2.default)(AnimatedBezier, _AnimatedNode);\n\n    var _super = _createSuper(AnimatedBezier);\n\n    function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedBezier);\n      (0, _invariant.default)(value instanceof _AnimatedNode2.default, \"Reanimated: Bezier node argument should be of type AnimatedNode but got \" + value);\n      _this = _super.call(this, {\n        type: 'bezier',\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        input: value\n      }, [value]);\n      _this._value = value;\n      _this._bezier = bezier(mX1, mY1, mX2, mY2);\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedBezier, [{\n      key: \"toString\",\n      value: function toString() {\n        return \"AnimatedBezier, id: \" + this.__nodeID;\n      }\n    }, {\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._bezier((0, _val.val)(this._value));\n      }\n    }]);\n    return AnimatedBezier;\n  }(_AnimatedNode2.default);\n\n  exports.default = AnimatedBezier;\n});","lineCount":178,"map":[[19,0,1,0],[21,0,2,0],[23,0,3,0],[29,0,6,0],[29,6,6,4,"NEWTON_ITERATIONS"],[29,23,6,21],[29,26,6,24],[29,27,6,0],[30,0,7,0],[30,6,7,4,"NEWTON_MIN_SLOPE"],[30,22,7,20],[30,25,7,23],[30,30,7,0],[31,0,8,0],[31,6,8,4,"SUBDIVISION_PRECISION"],[31,27,8,25],[31,30,8,28],[31,39,8,0],[32,0,9,0],[32,6,9,4,"SUBDIVISION_MAX_ITERATIONS"],[32,32,9,30],[32,35,9,33],[32,37,9,0],[33,0,11,0],[33,6,11,4,"kSplineTableSize"],[33,22,11,20],[33,25,11,23],[33,27,11,0],[34,0,12,0],[34,6,12,4,"kSampleStepSize"],[34,21,12,19],[34,24,12,22],[34,31,12,29,"kSplineTableSize"],[34,47,12,45],[34,50,12,48],[34,53,12,22],[34,54,12,0],[35,0,14,0],[35,6,14,4,"float32ArraySupported"],[35,27,14,25],[35,30,14,28],[35,37,14,35,"Float32Array"],[35,49,14,28],[35,54,14,52],[35,64,14,0],[37,0,16,0],[37,11,16,9,"A"],[37,12,16,0],[37,13,16,11,"aA1"],[37,16,16,0],[37,18,16,16,"aA2"],[37,21,16,0],[37,23,16,21],[38,0,17,2],[38,11,17,9],[38,17,17,15],[38,23,17,21,"aA2"],[38,26,17,9],[38,29,17,27],[38,35,17,33,"aA1"],[38,38,17,2],[39,0,18,1],[41,0,19,0],[41,11,19,9,"B"],[41,12,19,0],[41,13,19,11,"aA1"],[41,16,19,0],[41,18,19,16,"aA2"],[41,21,19,0],[41,23,19,21],[42,0,20,2],[42,11,20,9],[42,17,20,15,"aA2"],[42,20,20,9],[42,23,20,21],[42,29,20,27,"aA1"],[42,32,20,2],[43,0,21,1],[45,0,22,0],[45,11,22,9,"C"],[45,12,22,0],[45,13,22,11,"aA1"],[45,16,22,0],[45,18,22,16],[46,0,23,2],[46,11,23,9],[46,17,23,15,"aA1"],[46,20,23,2],[47,0,24,1],[49,0,27,0],[49,11,27,9,"calcBezier"],[49,21,27,0],[49,22,27,20,"aT"],[49,24,27,0],[49,26,27,24,"aA1"],[49,29,27,0],[49,31,27,29,"aA2"],[49,34,27,0],[49,36,27,34],[50,0,28,2],[50,11,28,9],[50,12,28,10],[50,13,28,11,"A"],[50,14,28,12],[50,15,28,13,"aA1"],[50,18,28,12],[50,20,28,18,"aA2"],[50,23,28,12],[50,24,28,11],[50,27,28,25,"aT"],[50,29,28,11],[50,32,28,30,"B"],[50,33,28,31],[50,34,28,32,"aA1"],[50,37,28,31],[50,39,28,37,"aA2"],[50,42,28,31],[50,43,28,10],[50,47,28,45,"aT"],[50,49,28,10],[50,52,28,50,"C"],[50,53,28,51],[50,54,28,52,"aA1"],[50,57,28,51],[50,58,28,9],[50,62,28,60,"aT"],[50,64,28,2],[51,0,29,1],[53,0,32,0],[53,11,32,9,"getSlope"],[53,19,32,0],[53,20,32,18,"aT"],[53,22,32,0],[53,24,32,22,"aA1"],[53,27,32,0],[53,29,32,27,"aA2"],[53,32,32,0],[53,34,32,32],[54,0,33,2],[54,11,33,9],[54,17,33,15,"A"],[54,18,33,16],[54,19,33,17,"aA1"],[54,22,33,16],[54,24,33,22,"aA2"],[54,27,33,16],[54,28,33,9],[54,31,33,29,"aT"],[54,33,33,9],[54,36,33,34,"aT"],[54,38,33,9],[54,41,33,39],[54,47,33,45,"B"],[54,48,33,46],[54,49,33,47,"aA1"],[54,52,33,46],[54,54,33,52,"aA2"],[54,57,33,46],[54,58,33,39],[54,61,33,59,"aT"],[54,63,33,9],[54,66,33,64,"C"],[54,67,33,65],[54,68,33,66,"aA1"],[54,71,33,65],[54,72,33,2],[55,0,34,1],[57,0,36,0],[57,11,36,9,"binarySubdivide"],[57,26,36,0],[57,27,36,25,"aX"],[57,29,36,0],[57,31,36,29,"aA"],[57,33,36,0],[57,35,36,33,"aB"],[57,37,36,0],[57,39,36,37,"mX1"],[57,42,36,0],[57,44,36,42,"mX2"],[57,47,36,0],[57,49,36,47],[58,0,37,2],[58,8,37,6,"currentX"],[58,16,37,14],[58,19,37,17],[58,20,37,2],[59,0,38,2],[59,8,38,6,"currentT"],[59,16,38,14],[59,19,38,17],[59,20,38,2],[60,0,39,2],[60,8,39,6,"i"],[60,9,39,7],[60,12,39,10],[60,13,39,2],[62,0,40,2],[62,7,40,5],[63,0,41,4,"currentT"],[63,6,41,4,"currentT"],[63,14,41,12],[63,17,41,15,"aA"],[63,19,41,17],[63,22,41,20],[63,23,41,21,"aB"],[63,25,41,23],[63,28,41,26,"aA"],[63,30,41,20],[63,34,41,32],[63,37,41,4],[64,0,42,4,"currentX"],[64,6,42,4,"currentX"],[64,14,42,12],[64,17,42,15,"calcBezier"],[64,27,42,25],[64,28,42,26,"currentT"],[64,36,42,25],[64,38,42,36,"mX1"],[64,41,42,25],[64,43,42,41,"mX2"],[64,46,42,25],[64,47,42,15],[64,50,42,48,"aX"],[64,52,42,4],[66,0,43,4],[66,10,43,8,"currentX"],[66,18,43,16],[66,21,43,19],[66,24,43,4],[66,26,43,24],[67,0,44,6,"aB"],[67,8,44,6,"aB"],[67,10,44,8],[67,13,44,11,"currentT"],[67,21,44,6],[68,0,45,5],[68,7,43,4],[68,13,45,11],[69,0,46,6,"aA"],[69,8,46,6,"aA"],[69,10,46,8],[69,13,46,11,"currentT"],[69,21,46,6],[70,0,47,5],[71,0,48,3],[71,5,40,2],[71,13,49,4,"Math"],[71,17,49,8],[71,18,49,9,"abs"],[71,21,49,4],[71,22,49,13,"currentX"],[71,30,49,4],[71,34,49,25,"SUBDIVISION_PRECISION"],[71,55,49,4],[71,59,50,4],[71,61,50,6,"i"],[71,62,50,4],[71,65,50,10,"SUBDIVISION_MAX_ITERATIONS"],[71,91,40,2],[73,0,52,2],[73,11,52,9,"currentT"],[73,19,52,2],[74,0,53,1],[76,0,55,0],[76,11,55,9,"newtonRaphsonIterate"],[76,31,55,0],[76,32,55,30,"aX"],[76,34,55,0],[76,36,55,34,"aGuessT"],[76,43,55,0],[76,45,55,43,"mX1"],[76,48,55,0],[76,50,55,48,"mX2"],[76,53,55,0],[76,55,55,53],[77,0,56,2],[77,9,56,7],[77,13,56,11,"i"],[77,14,56,12],[77,17,56,15],[77,18,56,2],[77,20,56,18,"i"],[77,21,56,19],[77,24,56,22,"NEWTON_ITERATIONS"],[77,41,56,2],[77,43,56,41],[77,45,56,43,"i"],[77,46,56,2],[77,48,56,46],[78,0,57,4],[78,10,57,8,"currentSlope"],[78,22,57,20],[78,25,57,23,"getSlope"],[78,33,57,31],[78,34,57,32,"aGuessT"],[78,41,57,31],[78,43,57,41,"mX1"],[78,46,57,31],[78,48,57,46,"mX2"],[78,51,57,31],[78,52,57,4],[80,0,58,4],[80,10,58,8,"currentSlope"],[80,22,58,20],[80,27,58,25],[80,30,58,4],[80,32,58,30],[81,0,59,6],[81,15,59,13,"aGuessT"],[81,22,59,6],[82,0,60,5],[84,0,61,4],[84,10,61,8,"currentX"],[84,18,61,16],[84,21,61,19,"calcBezier"],[84,31,61,29],[84,32,61,30,"aGuessT"],[84,39,61,29],[84,41,61,39,"mX1"],[84,44,61,29],[84,46,61,44,"mX2"],[84,49,61,29],[84,50,61,19],[84,53,61,51,"aX"],[84,55,61,4],[85,0,62,4,"aGuessT"],[85,6,62,4,"aGuessT"],[85,13,62,11],[85,17,62,15,"currentX"],[85,25,62,23],[85,28,62,26,"currentSlope"],[85,40,62,4],[86,0,63,3],[88,0,64,2],[88,11,64,9,"aGuessT"],[88,18,64,2],[89,0,65,1],[91,0,67,0],[91,11,67,9,"bezier"],[91,17,67,0],[91,18,67,16,"mX1"],[91,21,67,0],[91,23,67,21,"mY1"],[91,26,67,0],[91,28,67,26,"mX2"],[91,31,67,0],[91,33,67,31,"mY2"],[91,36,67,0],[91,38,67,36],[92,0,69,2],[92,8,69,6,"sampleValues"],[92,20,69,18],[92,23,69,21,"float32ArraySupported"],[92,44,69,42],[92,47,70,6],[92,51,70,10,"Float32Array"],[92,63,70,6],[92,64,70,23,"kSplineTableSize"],[92,80,70,6],[92,81,69,42],[92,84,71,6],[92,88,71,10,"Array"],[92,93,71,6],[92,94,71,16,"kSplineTableSize"],[92,110,71,6],[92,111,69,2],[94,0,72,2],[94,8,72,6,"mX1"],[94,11,72,9],[94,16,72,14,"mY1"],[94,19,72,6],[94,23,72,21,"mX2"],[94,26,72,24],[94,31,72,29,"mY2"],[94,34,72,2],[94,36,72,34],[95,0,73,4],[95,11,73,9],[95,15,73,13,"i"],[95,16,73,14],[95,19,73,17],[95,20,73,4],[95,22,73,20,"i"],[95,23,73,21],[95,26,73,24,"kSplineTableSize"],[95,42,73,4],[95,44,73,42],[95,46,73,44,"i"],[95,47,73,4],[95,49,73,47],[96,0,74,6,"sampleValues"],[96,8,74,6,"sampleValues"],[96,20,74,18],[96,21,74,19,"i"],[96,22,74,18],[96,23,74,6],[96,26,74,24,"calcBezier"],[96,36,74,34],[96,37,74,35,"i"],[96,38,74,36],[96,41,74,39,"kSampleStepSize"],[96,56,74,34],[96,58,74,56,"mX1"],[96,61,74,34],[96,63,74,61,"mX2"],[96,66,74,34],[96,67,74,6],[97,0,75,5],[98,0,76,3],[100,0,78,2],[100,13,78,11,"getTForX"],[100,21,78,2],[100,22,78,20,"aX"],[100,24,78,2],[100,26,78,24],[101,0,79,4],[101,10,79,8,"intervalStart"],[101,23,79,21],[101,26,79,24],[101,29,79,4],[102,0,80,4],[102,10,80,8,"currentSample"],[102,23,80,21],[102,26,80,24],[102,27,80,4],[103,0,81,4],[103,10,81,8,"lastSample"],[103,20,81,18],[103,23,81,21,"kSplineTableSize"],[103,39,81,37],[103,42,81,40],[103,43,81,4],[105,0,83,4],[105,13,85,6,"currentSample"],[105,26,85,19],[105,31,85,24,"lastSample"],[105,41,85,6],[105,45,85,38,"sampleValues"],[105,57,85,50],[105,58,85,51,"currentSample"],[105,71,85,50],[105,72,85,38],[105,76,85,69,"aX"],[105,78,83,4],[105,80,86,6],[105,82,86,8,"currentSample"],[105,95,83,4],[105,97,87,6],[106,0,88,6,"intervalStart"],[106,8,88,6,"intervalStart"],[106,21,88,19],[106,25,88,23,"kSampleStepSize"],[106,40,88,6],[107,0,89,5],[109,0,90,4],[109,8,90,6,"currentSample"],[109,21,90,4],[110,0,93,4],[110,10,93,8,"dist"],[110,14,93,12],[110,17,94,6],[110,18,94,7,"aX"],[110,20,94,9],[110,23,94,12,"sampleValues"],[110,35,94,24],[110,36,94,25,"currentSample"],[110,49,94,24],[110,50,94,6],[110,55,95,7,"sampleValues"],[110,67,95,19],[110,68,95,20,"currentSample"],[110,81,95,33],[110,84,95,36],[110,85,95,19],[110,86,95,7],[110,89,95,41,"sampleValues"],[110,101,95,53],[110,102,95,54,"currentSample"],[110,115,95,53],[110,116,94,6],[110,117,93,4],[111,0,96,4],[111,10,96,8,"guessForT"],[111,19,96,17],[111,22,96,20,"intervalStart"],[111,35,96,33],[111,38,96,36,"dist"],[111,42,96,40],[111,45,96,43,"kSampleStepSize"],[111,60,96,4],[112,0,98,4],[112,10,98,8,"initialSlope"],[112,22,98,20],[112,25,98,23,"getSlope"],[112,33,98,31],[112,34,98,32,"guessForT"],[112,43,98,31],[112,45,98,43,"mX1"],[112,48,98,31],[112,50,98,48,"mX2"],[112,53,98,31],[112,54,98,4],[114,0,99,4],[114,10,99,8,"initialSlope"],[114,22,99,20],[114,26,99,24,"NEWTON_MIN_SLOPE"],[114,42,99,4],[114,44,99,42],[115,0,100,6],[115,15,100,13,"newtonRaphsonIterate"],[115,35,100,33],[115,36,100,34,"aX"],[115,38,100,33],[115,40,100,38,"guessForT"],[115,49,100,33],[115,51,100,49,"mX1"],[115,54,100,33],[115,56,100,54,"mX2"],[115,59,100,33],[115,60,100,6],[116,0,101,5],[116,7,99,4],[116,13,101,11],[116,17,101,15,"initialSlope"],[116,29,101,27],[116,34,101,32],[116,37,101,11],[116,39,101,37],[117,0,102,6],[117,15,102,13,"guessForT"],[117,24,102,6],[118,0,103,5],[118,7,101,11],[118,13,103,11],[119,0,104,6],[119,15,104,13,"binarySubdivide"],[119,30,104,28],[119,31,105,8,"aX"],[119,33,104,28],[119,35,106,8,"intervalStart"],[119,48,104,28],[119,50,107,8,"intervalStart"],[119,63,107,21],[119,66,107,24,"kSampleStepSize"],[119,81,104,28],[119,83,108,8,"mX1"],[119,86,104,28],[119,88,109,8,"mX2"],[119,91,104,28],[119,92,104,6],[120,0,111,5],[121,0,112,3],[123,0,114,2],[123,11,114,9],[123,20,114,18,"BezierEasing"],[123,32,114,9],[123,33,114,31,"x"],[123,34,114,9],[123,36,114,34],[124,0,115,4],[124,10,115,8,"mX1"],[124,13,115,11],[124,18,115,16,"mY1"],[124,21,115,8],[124,25,115,23,"mX2"],[124,28,115,26],[124,33,115,31,"mY2"],[124,36,115,4],[124,38,115,36],[125,0,116,6],[125,15,116,13,"x"],[125,16,116,6],[126,0,117,5],[128,0,119,4],[128,10,119,8,"x"],[128,11,119,9],[128,16,119,14],[128,17,119,4],[128,19,119,17],[129,0,120,6],[129,15,120,13],[129,16,120,6],[130,0,121,5],[132,0,122,4],[132,10,122,8,"x"],[132,11,122,9],[132,16,122,14],[132,17,122,4],[132,19,122,17],[133,0,123,6],[133,15,123,13],[133,16,123,6],[134,0,124,5],[136,0,125,4],[136,13,125,11,"calcBezier"],[136,23,125,21],[136,24,125,22,"getTForX"],[136,32,125,30],[136,33,125,31,"x"],[136,34,125,30],[136,35,125,21],[136,37,125,35,"mY1"],[136,40,125,21],[136,42,125,40,"mY2"],[136,45,125,21],[136,46,125,4],[137,0,126,3],[137,5,114,2],[138,0,127,1],[140,6,129,21,"AnimatedBezier"],[140,20],[145,0,133,2],[145,28,133,14,"value"],[145,33,133,2],[145,35,133,21,"mX1"],[145,38,133,2],[145,40,133,26,"mY1"],[145,43,133,2],[145,45,133,31,"mX2"],[145,48,133,2],[145,50,133,36,"mY2"],[145,53,133,2],[145,55,133,41],[146,0,133,41],[148,0,133,41],[149,0,134,4],[149,30,135,6,"value"],[149,35,135,11],[149,47,135,23,"AnimatedNode"],[149,69,134,4],[149,148,136,81,"value"],[149,153,134,4],[150,0,138,4],[150,32,138,10],[151,0,138,12,"type"],[151,8,138,12,"type"],[151,12,138,16],[151,14,138,18],[151,22,138,10],[152,0,138,28,"mX1"],[152,8,138,28,"mX1"],[152,11,138,31],[152,13,138,28,"mX1"],[152,16,138,10],[153,0,138,33,"mY1"],[153,8,138,33,"mY1"],[153,11,138,36],[153,13,138,33,"mY1"],[153,16,138,10],[154,0,138,38,"mX2"],[154,8,138,38,"mX2"],[154,11,138,41],[154,13,138,38,"mX2"],[154,16,138,10],[155,0,138,43,"mY2"],[155,8,138,43,"mY2"],[155,11,138,46],[155,13,138,43,"mY2"],[155,16,138,10],[156,0,138,48,"input"],[156,8,138,48,"input"],[156,13,138,53],[156,15,138,55,"value"],[157,0,138,10],[157,7,138,4],[157,9,138,64],[157,10,139,6,"value"],[157,15,138,64],[157,16,138,4],[158,0,141,4],[158,12,141,9,"_value"],[158,18,141,4],[158,21,141,18,"value"],[158,26,141,4],[159,0,142,4],[159,12,142,9,"_bezier"],[159,19,142,4],[159,22,142,19,"bezier"],[159,28,142,25],[159,29,142,26,"mX1"],[159,32,142,25],[159,34,142,31,"mY1"],[159,37,142,25],[159,39,142,36,"mX2"],[159,42,142,25],[159,44,142,41,"mY2"],[159,47,142,25],[159,48,142,4],[160,0,133,41],[161,0,143,3],[165,33,145,13],[166,0,146,4],[166,40,146,34],[166,45,146,39,"__nodeID"],[166,53,146,4],[167,0,147,3],[170,37,149,17],[171,0,150,4],[171,15,150,11],[171,20,150,16,"_bezier"],[171,27,150,11],[171,28,150,24],[171,42,150,28],[171,47,150,33,"_value"],[171,53,150,24],[171,54,150,11],[171,55,150,4],[172,0,151,3],[175,4,129,44,"AnimatedNode"],[175,26]],"functionMap":{"names":["<global>","A","B","C","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","bezier","getTForX","BezierEasing","AnimatedBezier","constructor","toString","__onEvaluate"],"mappings":"AAA;ACe;CDE;AEC;CFE;AGC;CHE;AIG;CJE;AKG;CLE;AME;CNiB;AOE;CPU;AQE;ECW;GDkC;SEE;GFY;CRC;eWE;ECI;GDU;EEE;GFE;EGE;GHE;CXC"}},"type":"js/module"}]}