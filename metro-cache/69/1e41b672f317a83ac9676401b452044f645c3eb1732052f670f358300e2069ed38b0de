{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"expo-constants","data":{"isAsync":false}},{"name":"fbjs/lib/ExecutionEnvironment","data":{"isAsync":false}},{"name":"fbjs/lib/invariant","data":{"isAsync":false}},{"name":"qs","data":{"isAsync":false}},{"name":"react","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"url-parse","data":{"isAsync":false}},{"name":"./ExpoLinking","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.makeUrl = makeUrl;\n  exports.parse = parse;\n  exports.addEventListener = addEventListener;\n  exports.removeEventListener = removeEventListener;\n  exports.parseInitialURLAsync = parseInitialURLAsync;\n  exports.sendIntent = sendIntent;\n  exports.openSettings = openSettings;\n  exports.getInitialURL = getInitialURL;\n  exports.openURL = openURL;\n  exports.canOpenURL = canOpenURL;\n  exports.useUrl = useUrl;\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/regenerator\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[4], \"@unimodules/core\");\n\n  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"expo-constants\"));\n\n  var _ExecutionEnvironment = _$$_REQUIRE(_dependencyMap[6], \"fbjs/lib/ExecutionEnvironment\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"fbjs/lib/invariant\"));\n\n  var _qs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"qs\"));\n\n  var _react = _$$_REQUIRE(_dependencyMap[9], \"react\");\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[10], \"react-native\");\n\n  var _urlParse = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"url-parse\"));\n\n  var _ExpoLinking = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12], \"./ExpoLinking\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var manifest = _expoConstants.default.manifest;\n\n  function validateURL(url) {\n    (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    (0, _invariant.default)(url, 'Invalid URL: cannot be empty');\n  }\n\n  function usesCustomScheme() {\n    return _expoConstants.default.appOwnership === 'standalone' && manifest.scheme;\n  }\n\n  function getHostUri() {\n    if (!manifest.hostUri && !usesCustomScheme()) {\n      return removeScheme(_expoConstants.default.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n    }\n\n    return manifest.hostUri;\n  }\n\n  function isExpoHosted() {\n    var hostUri = getHostUri();\n    return !!(hostUri && (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri) || manifest.developer));\n  }\n\n  function removeScheme(url) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  function removePort(url) {\n    return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n  }\n\n  function removeLeadingSlash(url) {\n    return url.replace(/^\\//, '');\n  }\n\n  function removeTrailingSlashAndQueryString(url) {\n    return url.replace(/\\/?\\?.*$/, '');\n  }\n\n  function ensureLeadingSlash(input, shouldAppend) {\n    var hasSlash = input.endsWith('/');\n\n    if (hasSlash && !shouldAppend) {\n      return input.substring(0, input.length - 1);\n    } else if (!hasSlash && shouldAppend) {\n      return input + \"/\";\n    }\n\n    return input;\n  }\n\n  function ensureTrailingSlash(input, shouldAppend) {\n    var hasSlash = input.startsWith('/');\n\n    if (hasSlash && !shouldAppend) {\n      return input.substring(1);\n    } else if (!hasSlash && shouldAppend) {\n      return \"/\" + input;\n    }\n\n    return input;\n  }\n\n  function makeUrl() {\n    var _manifest$scheme, _manifest$detach;\n\n    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (_reactNative.Platform.OS === 'web') {\n      if (!_ExecutionEnvironment.canUseDOM) return '';\n      var origin = ensureLeadingSlash(window.location.origin, false);\n\n      var _queryString = _qs.default.stringify(queryParams);\n\n      if (_queryString) {\n        _queryString = \"?\" + _queryString;\n      }\n\n      var outputPath = path;\n      if (outputPath) outputPath = ensureTrailingSlash(path, true);\n      return encodeURI(\"\" + origin + outputPath + _queryString);\n    }\n\n    if (!_expoConstants.default.manifest) {\n      console.warn('Linking.makeUrl is not supported in bare workflow. Switch to using your scheme string directly.');\n      return '';\n    }\n\n    var scheme = 'exp';\n    var manifestScheme = (_manifest$scheme = manifest.scheme) != null ? _manifest$scheme : manifest == null ? void 0 : (_manifest$detach = manifest.detach) == null ? void 0 : _manifest$detach.scheme;\n\n    if (_expoConstants.default.appOwnership === 'standalone' && manifestScheme) {\n      scheme = manifestScheme;\n    } else if (_expoConstants.default.appOwnership === 'standalone' && !manifestScheme) {\n      throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');\n    } else if (_expoConstants.default.appOwnership === 'expo' && !manifestScheme) {\n      console.warn('Linking requires that you provide a `scheme` in app.json for standalone apps - if it is left blank, your app may crash. The scheme does not apply to development in the Expo client but you should add it as soon as you start working with Linking to avoid creating a broken build. Add a `scheme` to silence this warning. Learn more about Linking at https://docs.expo.io/versions/latest/workflow/linking/');\n    }\n\n    var hostUri = getHostUri() || '';\n\n    if (usesCustomScheme() && isExpoHosted()) {\n      hostUri = '';\n    }\n\n    if (path) {\n      if (isExpoHosted() && hostUri) {\n        path = \"/--/\" + removeLeadingSlash(path);\n      }\n\n      if (!path.startsWith('/')) {\n        path = \"/\" + path;\n      }\n    } else {\n      path = '';\n    }\n\n    var queryString = '';\n    var queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n\n    if (queryStringMatchResult) {\n      hostUri = queryStringMatchResult[1];\n      queryString = queryStringMatchResult[2];\n      var paramsFromHostUri = {};\n\n      try {\n        var parsedParams = _qs.default.parse(queryString);\n\n        if (typeof parsedParams === 'object') {\n          paramsFromHostUri = parsedParams;\n        }\n      } catch (e) {}\n\n      queryParams = _objectSpread(_objectSpread({}, queryParams), paramsFromHostUri);\n    }\n\n    queryString = _qs.default.stringify(queryParams);\n\n    if (queryString) {\n      queryString = \"?\" + queryString;\n    }\n\n    hostUri = ensureTrailingSlash(hostUri, false);\n    return encodeURI(scheme + \"://\" + hostUri + path + queryString);\n  }\n\n  function parse(url) {\n    validateURL(url);\n    var parsed = (0, _urlParse.default)(url, true);\n\n    for (var param in parsed.query) {\n      parsed.query[param] = decodeURIComponent(parsed.query[param]);\n    }\n\n    var queryParams = parsed.query;\n    var hostUri = getHostUri() || '';\n    var hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n    var path = parsed.pathname || null;\n    var hostname = parsed.hostname || null;\n    var scheme = parsed.protocol || null;\n\n    if (scheme) {\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n\n    if (path) {\n      path = removeLeadingSlash(path);\n      var expoPrefix = null;\n\n      if (hostUriStripped) {\n        var parts = hostUriStripped.split('/');\n        expoPrefix = parts.slice(1).concat(['--/']).join('/');\n      }\n\n      if (isExpoHosted() && !usesCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n        path = path.substring(expoPrefix.length);\n        hostname = null;\n      } else if (path.indexOf('+') > -1) {\n        path = path.substring(path.indexOf('+') + 1);\n      }\n    }\n\n    return {\n      hostname: hostname,\n      path: path,\n      queryParams: queryParams,\n      scheme: scheme\n    };\n  }\n\n  function addEventListener(type, handler) {\n    _ExpoLinking.default.addEventListener(type, handler);\n  }\n\n  function removeEventListener(type, handler) {\n    _ExpoLinking.default.removeEventListener(type, handler);\n  }\n\n  function parseInitialURLAsync() {\n    var initialUrl;\n    return _regenerator.default.async(function parseInitialURLAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(_ExpoLinking.default.getInitialURL());\n\n          case 2:\n            initialUrl = _context.sent;\n\n            if (initialUrl) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              scheme: null,\n              hostname: null,\n              path: null,\n              queryParams: null\n            });\n\n          case 5:\n            return _context.abrupt(\"return\", parse(initialUrl));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function sendIntent(action, extras) {\n    return _regenerator.default.async(function sendIntent$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(_reactNative.Platform.OS === 'android')) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regenerator.default.awrap(_ExpoLinking.default.sendIntent(action, extras));\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n            throw new _core.UnavailabilityError('Linking', 'sendIntent');\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function openSettings() {\n    return _regenerator.default.async(function openSettings$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(_reactNative.Platform.OS === 'web')) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('Linking', 'openSettings');\n\n          case 2:\n            if (!_ExpoLinking.default.openSettings) {\n              _context3.next = 6;\n              break;\n            }\n\n            _context3.next = 5;\n            return _regenerator.default.awrap(_ExpoLinking.default.openSettings());\n\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 6:\n            _context3.next = 8;\n            return _regenerator.default.awrap(openURL('app-settings:'));\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function getInitialURL() {\n    var _await$NativeLinking$;\n\n    return _regenerator.default.async(function getInitialURL$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regenerator.default.awrap(_ExpoLinking.default.getInitialURL());\n\n          case 2:\n            _context4.t0 = _await$NativeLinking$ = _context4.sent;\n\n            if (!(_context4.t0 != null)) {\n              _context4.next = 7;\n              break;\n            }\n\n            _context4.t1 = _await$NativeLinking$;\n            _context4.next = 8;\n            break;\n\n          case 7:\n            _context4.t1 = null;\n\n          case 8:\n            return _context4.abrupt(\"return\", _context4.t1);\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function openURL(url) {\n    return _regenerator.default.async(function openURL$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            validateURL(url);\n            _context5.next = 3;\n            return _regenerator.default.awrap(_ExpoLinking.default.openURL(url));\n\n          case 3:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function canOpenURL(url) {\n    return _regenerator.default.async(function canOpenURL$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            validateURL(url);\n            _context6.next = 3;\n            return _regenerator.default.awrap(_ExpoLinking.default.canOpenURL(url));\n\n          case 3:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function useUrl() {\n    var _useState = (0, _react.useState)(null),\n        _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n        url = _useState2[0],\n        setLink = _useState2[1];\n\n    function onChange(event) {\n      setLink(event.url);\n    }\n\n    (0, _react.useEffect)(function () {\n      getInitialURL().then(function (url) {\n        return setLink(url);\n      });\n      addEventListener('url', onChange);\n      return function () {\n        return removeEventListener('url', onChange);\n      };\n    }, []);\n    return url;\n  }\n});","lineCount":442,"map":[[25,0,1,0],[27,0,2,0],[29,0,3,0],[31,0,4,0],[33,0,5,0],[35,0,6,0],[37,0,7,0],[39,0,8,0],[41,0,9,0],[47,6,10,8,"manifest"],[47,14],[47,17,10,21,"Constants"],[47,39],[47,40,10,8,"manifest"],[47,48],[49,0,11,0],[49,11,11,9,"validateURL"],[49,22,11,0],[49,23,11,21,"url"],[49,26,11,0],[49,28,11,26],[50,0,12,4],[50,28,12,14],[50,35,12,21,"url"],[50,38,12,14],[50,43,12,29],[50,51,12,4],[50,53,12,39],[50,96,12,82,"url"],[50,99,12,4],[51,0,13,4],[51,28,13,14,"url"],[51,31,13,4],[51,33,13,19],[51,63,13,4],[52,0,14,1],[54,0,15,0],[54,11,15,9,"usesCustomScheme"],[54,27,15,0],[54,30,15,28],[55,0,16,4],[55,11,16,11,"Constants"],[55,34,16,21,"appOwnership"],[55,46,16,11],[55,51,16,38],[55,63,16,11],[55,67,16,54,"manifest"],[55,75,16,62],[55,76,16,63,"scheme"],[55,82,16,4],[56,0,17,1],[58,0,18,0],[58,11,18,9,"getHostUri"],[58,21,18,0],[58,24,18,22],[59,0,19,4],[59,8,19,8],[59,9,19,9,"manifest"],[59,17,19,17],[59,18,19,18,"hostUri"],[59,25,19,8],[59,29,19,29],[59,30,19,30,"usesCustomScheme"],[59,46,19,46],[59,48,19,4],[59,50,19,50],[60,0,22,8],[60,13,22,15,"removeScheme"],[60,25,22,27],[60,26,22,28,"Constants"],[60,49,22,38,"linkingUri"],[60,59,22,27],[60,60,22,15],[60,61,22,50,"replace"],[60,68,22,15],[60,69,22,58],[60,84,22,15],[60,86,22,75],[60,88,22,15],[60,89,22,8],[61,0,23,5],[63,0,24,4],[63,11,24,11,"manifest"],[63,19,24,19],[63,20,24,20,"hostUri"],[63,27,24,4],[64,0,25,1],[66,0,26,0],[66,11,26,9,"isExpoHosted"],[66,23,26,0],[66,26,26,24],[67,0,27,4],[67,8,27,10,"hostUri"],[67,15,27,17],[67,18,27,20,"getHostUri"],[67,28,27,30],[67,30,27,4],[68,0,28,4],[68,11,28,11],[68,12,28,12],[68,14,28,14,"hostUri"],[68,21,28,21],[68,26,29,9],[68,94,29,77,"test"],[68,98,29,9],[68,99,29,82,"hostUri"],[68,106,29,9],[68,111,30,12,"manifest"],[68,119,30,20],[68,120,30,21,"developer"],[68,129,28,21],[68,130,28,12],[68,131,28,4],[69,0,31,1],[71,0,32,0],[71,11,32,9,"removeScheme"],[71,23,32,0],[71,24,32,22,"url"],[71,27,32,0],[71,29,32,27],[72,0,33,4],[72,11,33,11,"url"],[72,14,33,14],[72,15,33,15,"replace"],[72,22,33,11],[72,23,33,23],[72,46,33,11],[72,48,33,48],[72,50,33,11],[72,51,33,4],[73,0,34,1],[75,0,35,0],[75,11,35,9,"removePort"],[75,21,35,0],[75,22,35,20,"url"],[75,25,35,0],[75,27,35,25],[76,0,36,4],[76,11,36,11,"url"],[76,14,36,14],[76,15,36,15,"replace"],[76,22,36,11],[76,23,36,23],[76,60,36,11],[76,62,36,62],[76,64,36,11],[76,65,36,4],[77,0,37,1],[79,0,38,0],[79,11,38,9,"removeLeadingSlash"],[79,29,38,0],[79,30,38,28,"url"],[79,33,38,0],[79,35,38,33],[80,0,39,4],[80,11,39,11,"url"],[80,14,39,14],[80,15,39,15,"replace"],[80,22,39,11],[80,23,39,23],[80,28,39,11],[80,30,39,30],[80,32,39,11],[80,33,39,4],[81,0,40,1],[83,0,41,0],[83,11,41,9,"removeTrailingSlashAndQueryString"],[83,44,41,0],[83,45,41,43,"url"],[83,48,41,0],[83,50,41,48],[84,0,42,4],[84,11,42,11,"url"],[84,14,42,14],[84,15,42,15,"replace"],[84,22,42,11],[84,23,42,23],[84,33,42,11],[84,35,42,35],[84,37,42,11],[84,38,42,4],[85,0,43,1],[87,0,44,0],[87,11,44,9,"ensureLeadingSlash"],[87,29,44,0],[87,30,44,28,"input"],[87,35,44,0],[87,37,44,35,"shouldAppend"],[87,49,44,0],[87,51,44,49],[88,0,45,4],[88,8,45,10,"hasSlash"],[88,16,45,18],[88,19,45,21,"input"],[88,24,45,26],[88,25,45,27,"endsWith"],[88,33,45,21],[88,34,45,36],[88,37,45,21],[88,38,45,4],[90,0,46,4],[90,8,46,8,"hasSlash"],[90,16,46,16],[90,20,46,20],[90,21,46,21,"shouldAppend"],[90,33,46,4],[90,35,46,35],[91,0,47,8],[91,13,47,15,"input"],[91,18,47,20],[91,19,47,21,"substring"],[91,28,47,15],[91,29,47,31],[91,30,47,15],[91,32,47,34,"input"],[91,37,47,39],[91,38,47,40,"length"],[91,44,47,34],[91,47,47,49],[91,48,47,15],[91,49,47,8],[92,0,48,5],[92,5,46,4],[92,11,49,9],[92,15,49,13],[92,16,49,14,"hasSlash"],[92,24,49,13],[92,28,49,26,"shouldAppend"],[92,40,49,9],[92,42,49,40],[93,0,50,8],[93,13,50,18,"input"],[93,18,50,8],[94,0,51,5],[96,0,52,4],[96,11,52,11,"input"],[96,16,52,4],[97,0,53,1],[99,0,54,0],[99,11,54,9,"ensureTrailingSlash"],[99,30,54,0],[99,31,54,29,"input"],[99,36,54,0],[99,38,54,36,"shouldAppend"],[99,50,54,0],[99,52,54,50],[100,0,55,4],[100,8,55,10,"hasSlash"],[100,16,55,18],[100,19,55,21,"input"],[100,24,55,26],[100,25,55,27,"startsWith"],[100,35,55,21],[100,36,55,38],[100,39,55,21],[100,40,55,4],[102,0,56,4],[102,8,56,8,"hasSlash"],[102,16,56,16],[102,20,56,20],[102,21,56,21,"shouldAppend"],[102,33,56,4],[102,35,56,35],[103,0,57,8],[103,13,57,15,"input"],[103,18,57,20],[103,19,57,21,"substring"],[103,28,57,15],[103,29,57,31],[103,30,57,15],[103,31,57,8],[104,0,58,5],[104,5,56,4],[104,11,59,9],[104,15,59,13],[104,16,59,14,"hasSlash"],[104,24,59,13],[104,28,59,26,"shouldAppend"],[104,40,59,9],[104,42,59,40],[105,0,60,8],[105,19,60,19,"input"],[105,24,60,8],[106,0,61,5],[108,0,62,4],[108,11,62,11,"input"],[108,16,62,4],[109,0,63,1],[111,0,80,7],[111,11,80,16,"makeUrl"],[111,18,80,7],[111,21,80,53],[112,0,80,53],[114,0,80,53],[114,8,80,24,"path"],[114,12,80,53],[114,83,80,31],[114,85,80,53],[115,0,80,53],[115,8,80,35,"queryParams"],[115,19,80,53],[115,90,80,49],[115,92,80,53],[117,0,81,4],[117,8,81,8,"Platform"],[117,30,81,17,"OS"],[117,32,81,8],[117,37,81,24],[117,42,81,4],[117,44,81,31],[118,0,82,8],[118,10,82,12],[118,11,82,13,"canUseDOM"],[118,42,82,8],[118,44,83,12],[118,51,83,19],[118,53,83,12],[119,0,84,8],[119,10,84,14,"origin"],[119,16,84,20],[119,19,84,23,"ensureLeadingSlash"],[119,37,84,41],[119,38,84,42,"window"],[119,44,84,48],[119,45,84,49,"location"],[119,53,84,42],[119,54,84,58,"origin"],[119,60,84,41],[119,62,84,66],[119,67,84,41],[119,68,84,8],[121,0,85,8],[121,10,85,12,"queryString"],[121,22,85,23],[121,25,85,26,"qs"],[121,37,85,29,"stringify"],[121,46,85,26],[121,47,85,39,"queryParams"],[121,58,85,26],[121,59,85,8],[123,0,86,8],[123,10,86,12,"queryString"],[123,22,86,8],[123,24,86,25],[124,0,87,12,"queryString"],[124,8,87,12,"queryString"],[124,20,87,23],[124,29,87,30,"queryString"],[124,41,87,12],[125,0,88,9],[127,0,89,8],[127,10,89,12,"outputPath"],[127,20,89,22],[127,23,89,25,"path"],[127,27,89,8],[128,0,90,8],[128,10,90,12,"outputPath"],[128,20,90,8],[128,22,91,12,"outputPath"],[128,32,91,22],[128,35,91,25,"ensureTrailingSlash"],[128,54,91,44],[128,55,91,45,"path"],[128,59,91,44],[128,61,91,51],[128,65,91,44],[128,66,91,12],[129,0,92,8],[129,13,92,15,"encodeURI"],[129,22,92,24],[129,28,92,28,"origin"],[129,34,92,24],[129,37,92,37,"outputPath"],[129,47,92,24],[129,50,92,50,"queryString"],[129,62,92,24],[129,63,92,8],[130,0,93,5],[132,0,95,4],[132,8,95,8],[132,9,95,9,"Constants"],[132,32,95,19,"manifest"],[132,40,95,4],[132,42,95,29],[133,0,96,8,"console"],[133,6,96,8,"console"],[133,13,96,15],[133,14,96,16,"warn"],[133,18,96,8],[133,19,96,21],[133,116,96,8],[134,0,97,8],[134,13,97,15],[134,15,97,8],[135,0,98,5],[137,0,99,4],[137,8,99,8,"scheme"],[137,14,99,14],[137,17,99,17],[137,22,99,4],[138,0,100,4],[138,8,100,10,"manifestScheme"],[138,22,100,24],[138,45,100,27,"manifest"],[138,53,100,35],[138,54,100,36,"scheme"],[138,60,100,24],[138,91,100,46,"manifest"],[138,99,100,24],[138,139,100,46,"manifest"],[138,147,100,54],[138,148,100,56,"detach"],[138,154,100,24],[138,175,100,46],[138,192,100,64,"scheme"],[138,198,100,4],[140,0,101,4],[140,8,101,8,"Constants"],[140,31,101,18,"appOwnership"],[140,43,101,8],[140,48,101,35],[140,60,101,8],[140,64,101,51,"manifestScheme"],[140,78,101,4],[140,80,101,67],[141,0,102,8,"scheme"],[141,6,102,8,"scheme"],[141,12,102,14],[141,15,102,17,"manifestScheme"],[141,29,102,8],[142,0,103,5],[142,5,101,4],[142,11,104,9],[142,15,104,13,"Constants"],[142,38,104,23,"appOwnership"],[142,50,104,13],[142,55,104,40],[142,67,104,13],[142,71,104,56],[142,72,104,57,"manifestScheme"],[142,86,104,9],[142,88,104,73],[143,0,105,8],[143,12,105,14],[143,16,105,18,"Error"],[143,21,105,14],[143,22,105,24],[143,99,105,14],[143,100,105,8],[144,0,106,5],[144,5,104,9],[144,11,107,9],[144,15,107,13,"Constants"],[144,38,107,23,"appOwnership"],[144,50,107,13],[144,55,107,40],[144,61,107,13],[144,65,107,50],[144,66,107,51,"manifestScheme"],[144,80,107,9],[144,82,107,67],[145,0,108,8,"console"],[145,6,108,8,"console"],[145,13,108,15],[145,14,108,16,"warn"],[145,18,108,8],[145,19,108,21],[145,421,108,8],[146,0,109,5],[148,0,110,4],[148,8,110,8,"hostUri"],[148,15,110,15],[148,18,110,18,"getHostUri"],[148,28,110,28],[148,34,110,34],[148,36,110,4],[150,0,111,4],[150,8,111,8,"usesCustomScheme"],[150,24,111,24],[150,30,111,30,"isExpoHosted"],[150,42,111,42],[150,44,111,4],[150,46,111,46],[151,0,112,8,"hostUri"],[151,6,112,8,"hostUri"],[151,13,112,15],[151,16,112,18],[151,18,112,8],[152,0,113,5],[154,0,114,4],[154,8,114,8,"path"],[154,12,114,4],[154,14,114,14],[155,0,115,8],[155,10,115,12,"isExpoHosted"],[155,22,115,24],[155,28,115,30,"hostUri"],[155,35,115,8],[155,37,115,39],[156,0,116,12,"path"],[156,8,116,12,"path"],[156,12,116,16],[156,24,116,26,"removeLeadingSlash"],[156,42,116,44],[156,43,116,45,"path"],[156,47,116,44],[156,48,116,12],[157,0,117,9],[159,0,118,8],[159,10,118,12],[159,11,118,13,"path"],[159,15,118,17],[159,16,118,18,"startsWith"],[159,26,118,13],[159,27,118,29],[159,30,118,13],[159,31,118,8],[159,33,118,35],[160,0,119,12,"path"],[160,8,119,12,"path"],[160,12,119,16],[160,21,119,23,"path"],[160,25,119,12],[161,0,120,9],[162,0,121,5],[162,5,114,4],[162,11,122,9],[163,0,123,8,"path"],[163,6,123,8,"path"],[163,10,123,12],[163,13,123,15],[163,15,123,8],[164,0,124,5],[166,0,127,4],[166,8,127,8,"queryString"],[166,19,127,19],[166,22,127,22],[166,24,127,4],[167,0,128,4],[167,8,128,10,"queryStringMatchResult"],[167,30,128,32],[167,33,128,35,"hostUri"],[167,40,128,42],[167,41,128,43,"match"],[167,46,128,35],[167,47,128,49],[167,59,128,35],[167,60,128,4],[169,0,129,4],[169,8,129,8,"queryStringMatchResult"],[169,30,129,4],[169,32,129,32],[170,0,130,8,"hostUri"],[170,6,130,8,"hostUri"],[170,13,130,15],[170,16,130,18,"queryStringMatchResult"],[170,38,130,40],[170,39,130,41],[170,40,130,40],[170,41,130,8],[171,0,131,8,"queryString"],[171,6,131,8,"queryString"],[171,17,131,19],[171,20,131,22,"queryStringMatchResult"],[171,42,131,44],[171,43,131,45],[171,44,131,44],[171,45,131,8],[172,0,132,8],[172,10,132,12,"paramsFromHostUri"],[172,27,132,29],[172,30,132,32],[172,32,132,8],[174,0,133,8],[174,10,133,12],[175,0,134,12],[175,12,134,18,"parsedParams"],[175,24,134,30],[175,27,134,33,"qs"],[175,39,134,36,"parse"],[175,44,134,33],[175,45,134,42,"queryString"],[175,56,134,33],[175,57,134,12],[177,0,135,12],[177,12,135,16],[177,19,135,23,"parsedParams"],[177,31,135,16],[177,36,135,40],[177,44,135,12],[177,46,135,50],[178,0,136,16,"paramsFromHostUri"],[178,10,136,16,"paramsFromHostUri"],[178,27,136,33],[178,30,136,36,"parsedParams"],[178,42,136,16],[179,0,137,13],[180,0,138,9],[180,7,133,8],[180,8,139,8],[180,15,139,15,"e"],[180,16,139,8],[180,18,139,18],[180,19,139,21],[182,0,140,8,"queryParams"],[182,6,140,8,"queryParams"],[182,17,140,19],[182,52,141,15,"queryParams"],[182,63,140,19],[182,66,142,15,"paramsFromHostUri"],[182,83,140,19],[182,84,140,8],[183,0,144,5],[185,0,145,4,"queryString"],[185,4,145,4,"queryString"],[185,15,145,15],[185,18,145,18,"qs"],[185,30,145,21,"stringify"],[185,39,145,18],[185,40,145,31,"queryParams"],[185,51,145,18],[185,52,145,4],[187,0,146,4],[187,8,146,8,"queryString"],[187,19,146,4],[187,21,146,21],[188,0,147,8,"queryString"],[188,6,147,8,"queryString"],[188,17,147,19],[188,26,147,26,"queryString"],[188,37,147,8],[189,0,148,5],[191,0,149,4,"hostUri"],[191,4,149,4,"hostUri"],[191,11,149,11],[191,14,149,14,"ensureTrailingSlash"],[191,33,149,33],[191,34,149,34,"hostUri"],[191,41,149,33],[191,43,149,43],[191,48,149,33],[191,49,149,4],[192,0,150,4],[192,11,150,11,"encodeURI"],[192,20,150,20],[192,21,150,24,"scheme"],[192,27,150,20],[192,38,150,36,"hostUri"],[192,45,150,20],[192,48,150,46,"path"],[192,52,150,20],[192,55,150,53,"queryString"],[192,66,150,20],[192,67,150,4],[193,0,151,1],[195,0,157,7],[195,11,157,16,"parse"],[195,16,157,7],[195,17,157,22,"url"],[195,20,157,7],[195,22,157,27],[196,0,158,4,"validateURL"],[196,4,158,4,"validateURL"],[196,15,158,15],[196,16,158,16,"url"],[196,19,158,15],[196,20,158,4],[197,0,159,4],[197,8,159,10,"parsed"],[197,14,159,16],[197,17,159,19],[197,40,159,23,"url"],[197,43,159,19],[197,45,159,51],[197,49,159,19],[197,50,159,4],[199,0,160,4],[199,9,160,9],[199,13,160,15,"param"],[199,18,160,4],[199,22,160,24,"parsed"],[199,28,160,30],[199,29,160,31,"query"],[199,34,160,4],[199,36,160,38],[200,0,161,8,"parsed"],[200,6,161,8,"parsed"],[200,12,161,14],[200,13,161,15,"query"],[200,18,161,8],[200,19,161,21,"param"],[200,24,161,8],[200,28,161,30,"decodeURIComponent"],[200,46,161,48],[200,47,161,49,"parsed"],[200,53,161,55],[200,54,161,56,"query"],[200,59,161,49],[200,60,161,62,"param"],[200,65,161,49],[200,66,161,48],[200,67,161,8],[201,0,162,5],[203,0,163,4],[203,8,163,10,"queryParams"],[203,19,163,21],[203,22,163,24,"parsed"],[203,28,163,30],[203,29,163,31,"query"],[203,34,163,4],[204,0,164,4],[204,8,164,10,"hostUri"],[204,15,164,17],[204,18,164,20,"getHostUri"],[204,28,164,30],[204,34,164,36],[204,36,164,4],[205,0,165,4],[205,8,165,10,"hostUriStripped"],[205,23,165,25],[205,26,165,28,"removePort"],[205,36,165,38],[205,37,165,39,"removeTrailingSlashAndQueryString"],[205,70,165,72],[205,71,165,73,"hostUri"],[205,78,165,72],[205,79,165,38],[205,80,165,4],[206,0,166,4],[206,8,166,8,"path"],[206,12,166,12],[206,15,166,15,"parsed"],[206,21,166,21],[206,22,166,22,"pathname"],[206,30,166,15],[206,34,166,34],[206,38,166,4],[207,0,167,4],[207,8,167,8,"hostname"],[207,16,167,16],[207,19,167,19,"parsed"],[207,25,167,25],[207,26,167,26,"hostname"],[207,34,167,19],[207,38,167,38],[207,42,167,4],[208,0,168,4],[208,8,168,8,"scheme"],[208,14,168,14],[208,17,168,17,"parsed"],[208,23,168,23],[208,24,168,24,"protocol"],[208,32,168,17],[208,36,168,36],[208,40,168,4],[210,0,169,4],[210,8,169,8,"scheme"],[210,14,169,4],[210,16,169,16],[211,0,171,8,"scheme"],[211,6,171,8,"scheme"],[211,12,171,14],[211,15,171,17,"scheme"],[211,21,171,23],[211,22,171,24,"substring"],[211,31,171,17],[211,32,171,34],[211,33,171,17],[211,35,171,37,"scheme"],[211,41,171,43],[211,42,171,44,"length"],[211,48,171,37],[211,51,171,53],[211,52,171,17],[211,53,171,8],[212,0,172,5],[214,0,173,4],[214,8,173,8,"path"],[214,12,173,4],[214,14,173,14],[215,0,174,8,"path"],[215,6,174,8,"path"],[215,10,174,12],[215,13,174,15,"removeLeadingSlash"],[215,31,174,33],[215,32,174,34,"path"],[215,36,174,33],[215,37,174,8],[216,0,175,8],[216,10,175,12,"expoPrefix"],[216,20,175,22],[216,23,175,25],[216,27,175,8],[218,0,176,8],[218,10,176,12,"hostUriStripped"],[218,25,176,8],[218,27,176,29],[219,0,177,12],[219,12,177,18,"parts"],[219,17,177,23],[219,20,177,26,"hostUriStripped"],[219,35,177,41],[219,36,177,42,"split"],[219,41,177,26],[219,42,177,48],[219,45,177,26],[219,46,177,12],[220,0,178,12,"expoPrefix"],[220,8,178,12,"expoPrefix"],[220,18,178,22],[220,21,178,25,"parts"],[220,26,178,30],[220,27,179,17,"slice"],[220,32,178,25],[220,33,179,23],[220,34,178,25],[220,36,180,17,"concat"],[220,42,178,25],[220,43,180,24],[220,44,180,25],[220,49,180,24],[220,50,178,25],[220,52,181,17,"join"],[220,56,178,25],[220,57,181,22],[220,60,178,25],[220,61,178,12],[221,0,182,9],[223,0,183,8],[223,10,183,12,"isExpoHosted"],[223,22,183,24],[223,28,183,30],[223,29,183,31,"usesCustomScheme"],[223,45,183,47],[223,47,183,12],[223,51,183,53,"expoPrefix"],[223,61,183,12],[223,65,183,67,"path"],[223,69,183,71],[223,70,183,72,"startsWith"],[223,80,183,67],[223,81,183,83,"expoPrefix"],[223,91,183,67],[223,92,183,8],[223,94,183,96],[224,0,184,12,"path"],[224,8,184,12,"path"],[224,12,184,16],[224,15,184,19,"path"],[224,19,184,23],[224,20,184,24,"substring"],[224,29,184,19],[224,30,184,34,"expoPrefix"],[224,40,184,44],[224,41,184,45,"length"],[224,47,184,19],[224,48,184,12],[225,0,185,12,"hostname"],[225,8,185,12,"hostname"],[225,16,185,20],[225,19,185,23],[225,23,185,12],[226,0,186,9],[226,7,183,8],[226,13,187,13],[226,17,187,17,"path"],[226,21,187,21],[226,22,187,22,"indexOf"],[226,29,187,17],[226,30,187,30],[226,33,187,17],[226,37,187,37],[226,38,187,38],[226,39,187,13],[226,41,187,41],[227,0,188,12,"path"],[227,8,188,12,"path"],[227,12,188,16],[227,15,188,19,"path"],[227,19,188,23],[227,20,188,24,"substring"],[227,29,188,19],[227,30,188,34,"path"],[227,34,188,38],[227,35,188,39,"indexOf"],[227,42,188,34],[227,43,188,47],[227,46,188,34],[227,50,188,54],[227,51,188,19],[227,52,188,12],[228,0,189,9],[229,0,190,5],[231,0,191,4],[231,11,191,11],[232,0,192,8,"hostname"],[232,6,192,8,"hostname"],[232,14,192,16],[232,16,192,8,"hostname"],[232,24,191,11],[233,0,193,8,"path"],[233,6,193,8,"path"],[233,10,193,12],[233,12,193,8,"path"],[233,16,191,11],[234,0,194,8,"queryParams"],[234,6,194,8,"queryParams"],[234,17,194,19],[234,19,194,8,"queryParams"],[234,30,191,11],[235,0,195,8,"scheme"],[235,6,195,8,"scheme"],[235,12,195,14],[235,14,195,8,"scheme"],[236,0,191,11],[236,5,191,4],[237,0,197,1],[239,0,204,7],[239,11,204,16,"addEventListener"],[239,27,204,7],[239,28,204,33,"type"],[239,32,204,7],[239,34,204,39,"handler"],[239,41,204,7],[239,43,204,48],[240,0,205,4,"NativeLinking"],[240,25,205,18,"addEventListener"],[240,41,205,4],[240,42,205,35,"type"],[240,46,205,4],[240,48,205,41,"handler"],[240,55,205,4],[241,0,206,1],[243,0,212,7],[243,11,212,16,"removeEventListener"],[243,30,212,7],[243,31,212,36,"type"],[243,35,212,7],[243,37,212,42,"handler"],[243,44,212,7],[243,46,212,51],[244,0,213,4,"NativeLinking"],[244,25,213,18,"removeEventListener"],[244,44,213,4],[244,45,213,38,"type"],[244,49,213,4],[244,51,213,44,"handler"],[244,58,213,4],[245,0,214,1],[247,0,219,7],[247,11,219,22,"parseInitialURLAsync"],[247,31,219,7],[248,0,219,7],[249,0,219,7],[250,0,219,7],[251,0,219,7],[252,0,219,7],[253,0,219,7],[254,0,219,7],[254,46,220,29,"NativeLinking"],[254,67,220,43,"getInitialURL"],[254,80,220,29],[254,82,219,7],[256,0,219,7],[257,0,220,10,"initialUrl"],[257,12,220,10,"initialUrl"],[257,22,219,7],[259,0,219,7],[259,16,221,9,"initialUrl"],[259,26,219,7],[260,0,219,7],[261,0,219,7],[262,0,219,7],[264,0,219,7],[264,45,222,15],[265,0,223,12,"scheme"],[265,14,223,12,"scheme"],[265,20,223,18],[265,22,223,20],[265,26,222,15],[266,0,224,12,"hostname"],[266,14,224,12,"hostname"],[266,22,224,20],[266,24,224,22],[266,28,222,15],[267,0,225,12,"path"],[267,14,225,12,"path"],[267,18,225,16],[267,20,225,18],[267,24,222,15],[268,0,226,12,"queryParams"],[268,14,226,12,"queryParams"],[268,25,226,23],[268,27,226,25],[269,0,222,15],[269,13,219,7],[271,0,219,7],[272,0,219,7],[272,45,229,11,"parse"],[272,50,229,16],[272,51,229,17,"initialUrl"],[272,61,229,16],[272,62,219,7],[274,0,219,7],[275,0,219,7],[276,0,219,7],[277,0,219,7],[278,0,219,7],[279,0,219,7],[280,0,219,7],[282,0,236,7],[282,11,236,22,"sendIntent"],[282,21,236,7],[282,22,236,33,"action"],[282,28,236,7],[282,30,236,41,"extras"],[282,36,236,7],[283,0,236,7],[284,0,236,7],[285,0,236,7],[286,0,236,7],[287,0,236,7],[287,18,237,8,"Platform"],[287,40,237,17,"OS"],[287,42,237,8],[287,47,237,24],[287,56,236,7],[288,0,236,7],[289,0,236,7],[290,0,236,7],[292,0,236,7],[293,0,236,7],[293,46,238,21,"NativeLinking"],[293,67,238,35,"sendIntent"],[293,77,238,21],[293,78,238,46,"action"],[293,84,238,21],[293,86,238,54,"extras"],[293,92,238,21],[293,93,236,7],[295,0,236,7],[296,0,236,7],[298,0,236,7],[299,0,236,7],[299,18,240,10],[299,22,240,14,"UnavailabilityError"],[299,47,240,10],[299,48,240,34],[299,57,240,10],[299,59,240,45],[299,71,240,10],[299,72,236,7],[301,0,236,7],[302,0,236,7],[303,0,236,7],[304,0,236,7],[305,0,236,7],[306,0,236,7],[307,0,236,7],[309,0,247,7],[309,11,247,22,"openSettings"],[309,23,247,7],[310,0,247,7],[311,0,247,7],[312,0,247,7],[313,0,247,7],[314,0,247,7],[314,18,248,8,"Platform"],[314,40,248,17,"OS"],[314,42,248,8],[314,47,248,24],[314,52,247,7],[315,0,247,7],[316,0,247,7],[317,0,247,7],[319,0,247,7],[319,18,249,14],[319,22,249,18,"UnavailabilityError"],[319,47,249,14],[319,48,249,38],[319,57,249,14],[319,59,249,49],[319,73,249,14],[319,74,247,7],[321,0,247,7],[322,0,247,7],[322,17,251,8,"NativeLinking"],[322,38,251,22,"openSettings"],[322,50,247,7],[323,0,247,7],[324,0,247,7],[325,0,247,7],[327,0,247,7],[328,0,247,7],[328,46,252,21,"NativeLinking"],[328,67,252,35,"openSettings"],[328,79,252,21],[328,81,247,7],[330,0,247,7],[331,0,247,7],[333,0,247,7],[334,0,247,7],[335,0,247,7],[335,46,254,10,"openURL"],[335,53,254,17],[335,54,254,18],[335,69,254,17],[335,70,247,7],[337,0,247,7],[338,0,247,7],[339,0,247,7],[340,0,247,7],[341,0,247,7],[342,0,247,7],[343,0,247,7],[345,0,260,7],[345,11,260,22,"getInitialURL"],[345,24,260,7],[346,0,260,7],[348,0,260,7],[349,0,260,7],[350,0,260,7],[351,0,260,7],[352,0,260,7],[353,0,260,7],[353,46,261,18,"NativeLinking"],[353,67,261,32,"getInitialURL"],[353,80,261,18],[353,82,260,7],[355,0,260,7],[356,0,260,7],[358,0,260,7],[359,0,260,7],[360,0,260,7],[361,0,260,7],[363,0,260,7],[364,0,260,7],[365,0,260,7],[367,0,260,7],[368,0,260,7],[368,27,261,52],[368,31,260,7],[370,0,260,7],[371,0,260,7],[373,0,260,7],[374,0,260,7],[375,0,260,7],[376,0,260,7],[377,0,260,7],[378,0,260,7],[379,0,260,7],[381,0,266,7],[381,11,266,22,"openURL"],[381,18,266,7],[381,19,266,30,"url"],[381,22,266,7],[382,0,266,7],[383,0,266,7],[384,0,266,7],[385,0,266,7],[386,0,267,4,"validateURL"],[386,12,267,4,"validateURL"],[386,23,267,15],[386,24,267,16,"url"],[386,27,267,15],[386,28,267,4],[387,0,266,7],[388,0,266,7],[388,46,268,17,"NativeLinking"],[388,67,268,31,"openURL"],[388,74,268,17],[388,75,268,39,"url"],[388,78,268,17],[388,79,266,7],[390,0,266,7],[391,0,266,7],[393,0,266,7],[394,0,266,7],[395,0,266,7],[396,0,266,7],[397,0,266,7],[398,0,266,7],[399,0,266,7],[401,0,274,7],[401,11,274,22,"canOpenURL"],[401,21,274,7],[401,22,274,33,"url"],[401,25,274,7],[402,0,274,7],[403,0,274,7],[404,0,274,7],[405,0,274,7],[406,0,275,4,"validateURL"],[406,12,275,4,"validateURL"],[406,23,275,15],[406,24,275,16,"url"],[406,27,275,15],[406,28,275,4],[407,0,274,7],[408,0,274,7],[408,46,276,17,"NativeLinking"],[408,67,276,31,"canOpenURL"],[408,77,276,17],[408,78,276,42,"url"],[408,81,276,17],[408,82,274,7],[410,0,274,7],[411,0,274,7],[413,0,274,7],[414,0,274,7],[415,0,274,7],[416,0,274,7],[417,0,274,7],[418,0,274,7],[419,0,274,7],[421,0,281,7],[421,11,281,16,"useUrl"],[421,17,281,7],[421,20,281,25],[422,0,281,25],[422,20,282,27],[422,41,282,36],[422,45,282,27],[422,46,281,25],[423,0,281,25],[424,0,281,25],[424,8,282,11,"url"],[424,11,281,25],[425,0,281,25],[425,8,282,16,"setLink"],[425,15,281,25],[427,0,283,4],[427,13,283,13,"onChange"],[427,21,283,4],[427,22,283,22,"event"],[427,27,283,4],[427,29,283,29],[428,0,284,8,"setLink"],[428,6,284,8,"setLink"],[428,13,284,15],[428,14,284,16,"event"],[428,19,284,21],[428,20,284,22,"url"],[428,23,284,15],[428,24,284,8],[429,0,285,5],[431,0,286,4],[431,26,286,14],[431,38,286,20],[432,0,287,8,"getInitialURL"],[432,6,287,8,"getInitialURL"],[432,19,287,21],[432,22,287,24,"then"],[432,26,287,8],[432,27,287,29],[432,37,287,29,"url"],[432,40,287,32],[433,0,287,32],[433,15,287,36,"setLink"],[433,22,287,43],[433,23,287,44,"url"],[433,26,287,43],[433,27,287,32],[434,0,287,32],[434,7,287,8],[435,0,288,8,"addEventListener"],[435,6,288,8,"addEventListener"],[435,22,288,24],[435,23,288,25],[435,28,288,24],[435,30,288,32,"onChange"],[435,38,288,24],[435,39,288,8],[436,0,289,8],[436,13,289,15],[437,0,289,15],[437,15,289,21,"removeEventListener"],[437,34,289,40],[437,35,289,41],[437,40,289,40],[437,42,289,48,"onChange"],[437,50,289,40],[437,51,289,15],[438,0,289,15],[438,7,289,8],[439,0,290,5],[439,5,286,4],[439,7,290,7],[439,9,286,4],[440,0,291,4],[440,11,291,11,"url"],[440,14,291,4],[441,0,292,1]],"functionMap":{"names":["<global>","validateURL","usesCustomScheme","getHostUri","isExpoHosted","removeScheme","removePort","removeLeadingSlash","removeTrailingSlashAndQueryString","ensureLeadingSlash","ensureTrailingSlash","makeUrl","parse","addEventListener","removeEventListener","parseInitialURLAsync","sendIntent","openSettings","getInitialURL","openURL","canOpenURL","useUrl","onChange","useEffect$argument_0","getInitialURL.then$argument_0","<anonymous>"],"mappings":"AAA;ACU;CDG;AEC;CFE;AGC;CHO;AIC;CJK;AKC;CLE;AMC;CNE;AOC;CPE;AQC;CRE;ASC;CTS;AUC;CVS;OWiB;CXuE;OYM;CZwC;OaO;CbE;OcM;CdE;OeK;CfW;OgBM;ChBK;OiBM;CjBQ;OkBK;ClBE;OmBI;CnBG;OoBK;CpBG;OqBI;ICE;KDE;cEC;6BCC,mBD;eEE,0CF;KFC;CrBE"}},"type":"js/module"}]}