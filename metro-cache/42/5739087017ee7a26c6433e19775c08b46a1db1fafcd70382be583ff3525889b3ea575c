{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}},{"name":"fbjs/lib/areEqual","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createOrReuseTransformNode = createOrReuseTransformNode;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/inherits\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./AnimatedNode\"));\n\n  var _areEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"fbjs/lib/areEqual\"));\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  function sanitizeTransform(inputTransform) {\n    var outputTransform = [];\n    inputTransform.forEach(function (transform) {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof _AnimatedNode2.default) {\n          outputTransform.push({\n            property: key,\n            nodeID: value.__nodeID\n          });\n        } else {\n          outputTransform.push({\n            property: key,\n            value: value\n          });\n        }\n      }\n    });\n    return outputTransform;\n  }\n\n  function extractAnimatedParentNodes(transform) {\n    var parents = [];\n    transform.forEach(function (transform) {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof _AnimatedNode2.default) {\n          parents.push(value);\n        }\n      }\n    });\n    return parents;\n  }\n\n  function createOrReuseTransformNode(transform, oldNode) {\n    var config = sanitizeTransform(transform);\n\n    if (oldNode && (0, _areEqual.default)(config, oldNode._config)) {\n      return oldNode;\n    }\n\n    return new AnimatedTransform(transform, config);\n  }\n\n  var AnimatedTransform = function (_AnimatedNode) {\n    (0, _inherits2.default)(AnimatedTransform, _AnimatedNode);\n\n    var _super = _createSuper(AnimatedTransform);\n\n    function AnimatedTransform(transform, config) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedTransform);\n      _this = _super.call(this, {\n        type: 'transform',\n        transform: config\n      }, extractAnimatedParentNodes(transform));\n      _this._config = config;\n      _this._transform = transform;\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedTransform, [{\n      key: \"toString\",\n      value: function toString() {\n        return \"AnimatedTransform, id: \" + this.__nodeID;\n      }\n    }, {\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._transform.map(function (transform) {\n          var result = {};\n\n          for (var key in transform) {\n            var value = transform[key];\n\n            if (value instanceof _AnimatedNode2.default) {\n              result[key] = value.__getValue();\n            }\n          }\n\n          return result;\n        });\n      }\n    }]);\n    return AnimatedTransform;\n  }(_AnimatedNode2.default);\n});","lineCount":116,"map":[[19,0,1,0],[21,0,3,0],[27,0,5,0],[27,11,5,9,"sanitizeTransform"],[27,28,5,0],[27,29,5,27,"inputTransform"],[27,43,5,0],[27,45,5,43],[28,0,6,2],[28,8,6,8,"outputTransform"],[28,23,6,23],[28,26,6,26],[28,28,6,2],[29,0,7,2,"inputTransform"],[29,4,7,2,"inputTransform"],[29,18,7,16],[29,19,7,17,"forEach"],[29,26,7,2],[29,27,7,25],[29,37,7,25,"transform"],[29,46,7,34],[29,48,7,38],[30,0,8,4],[30,11,8,9],[30,15,8,15,"key"],[30,18,8,4],[30,22,8,22,"transform"],[30,31,8,4],[30,33,8,33],[31,0,9,6],[31,12,9,12,"value"],[31,17,9,17],[31,20,9,20,"transform"],[31,29,9,29],[31,30,9,30,"key"],[31,33,9,29],[31,34,9,6],[33,0,10,6],[33,12,10,10,"value"],[33,17,10,15],[33,29,10,27,"AnimatedNode"],[33,51,10,6],[33,53,10,41],[34,0,11,8,"outputTransform"],[34,10,11,8,"outputTransform"],[34,25,11,23],[34,26,11,24,"push"],[34,30,11,8],[34,31,11,29],[35,0,12,10,"property"],[35,12,12,10,"property"],[35,20,12,18],[35,22,12,20,"key"],[35,25,11,29],[36,0,13,10,"nodeID"],[36,12,13,10,"nodeID"],[36,18,13,16],[36,20,13,18,"value"],[36,25,13,23],[36,26,13,24,"__nodeID"],[37,0,11,29],[37,11,11,8],[38,0,15,7],[38,9,10,6],[38,15,15,13],[39,0,16,8,"outputTransform"],[39,10,16,8,"outputTransform"],[39,25,16,23],[39,26,16,24,"push"],[39,30,16,8],[39,31,16,29],[40,0,17,10,"property"],[40,12,17,10,"property"],[40,20,17,18],[40,22,17,20,"key"],[40,25,16,29],[41,0,18,10,"value"],[41,12,18,10,"value"],[41,17,18,15],[41,19,18,10,"value"],[42,0,16,29],[42,11,16,8],[43,0,20,7],[44,0,21,5],[45,0,22,3],[45,5,7,2],[46,0,23,2],[46,11,23,9,"outputTransform"],[46,26,23,2],[47,0,24,1],[49,0,26,0],[49,11,26,9,"extractAnimatedParentNodes"],[49,37,26,0],[49,38,26,36,"transform"],[49,47,26,0],[49,49,26,47],[50,0,27,2],[50,8,27,8,"parents"],[50,15,27,15],[50,18,27,18],[50,20,27,2],[51,0,28,2,"transform"],[51,4,28,2,"transform"],[51,13,28,11],[51,14,28,12,"forEach"],[51,21,28,2],[51,22,28,20],[51,32,28,20,"transform"],[51,41,28,29],[51,43,28,33],[52,0,29,4],[52,11,29,9],[52,15,29,15,"key"],[52,18,29,4],[52,22,29,22,"transform"],[52,31,29,4],[52,33,29,33],[53,0,30,6],[53,12,30,12,"value"],[53,17,30,17],[53,20,30,20,"transform"],[53,29,30,29],[53,30,30,30,"key"],[53,33,30,29],[53,34,30,6],[55,0,31,6],[55,12,31,10,"value"],[55,17,31,15],[55,29,31,27,"AnimatedNode"],[55,51,31,6],[55,53,31,41],[56,0,32,8,"parents"],[56,10,32,8,"parents"],[56,17,32,15],[56,18,32,16,"push"],[56,22,32,8],[56,23,32,21,"value"],[56,28,32,8],[57,0,33,7],[58,0,34,5],[59,0,35,3],[59,5,28,2],[60,0,36,2],[60,11,36,9,"parents"],[60,18,36,2],[61,0,37,1],[63,0,39,7],[63,11,39,16,"createOrReuseTransformNode"],[63,37,39,7],[63,38,39,43,"transform"],[63,47,39,7],[63,49,39,54,"oldNode"],[63,56,39,7],[63,58,39,63],[64,0,40,2],[64,8,40,8,"config"],[64,14,40,14],[64,17,40,17,"sanitizeTransform"],[64,34,40,34],[64,35,40,35,"transform"],[64,44,40,34],[64,45,40,2],[66,0,41,2],[66,8,41,6,"oldNode"],[66,15,41,13],[66,19,41,17],[66,42,41,27,"config"],[66,48,41,17],[66,50,41,35,"oldNode"],[66,57,41,42],[66,58,41,43,"_config"],[66,65,41,17],[66,66,41,2],[66,68,41,53],[67,0,42,4],[67,13,42,11,"oldNode"],[67,20,42,4],[68,0,43,3],[70,0,44,2],[70,11,44,9],[70,15,44,13,"AnimatedTransform"],[70,32,44,9],[70,33,44,31,"transform"],[70,42,44,9],[70,44,44,42,"config"],[70,50,44,9],[70,51,44,2],[71,0,45,1],[73,6,47,6,"AnimatedTransform"],[73,23],[78,0,48,2],[78,31,48,14,"transform"],[78,40,48,2],[78,42,48,25,"config"],[78,48,48,2],[78,50,48,33],[79,0,48,33],[81,0,48,33],[82,0,49,4],[82,32,50,6],[83,0,50,8,"type"],[83,8,50,8,"type"],[83,12,50,12],[83,14,50,14],[83,25,50,6],[84,0,50,27,"transform"],[84,8,50,27,"transform"],[84,17,50,36],[84,19,50,38,"config"],[85,0,50,6],[85,7,49,4],[85,9,51,6,"extractAnimatedParentNodes"],[85,35,51,32],[85,36,51,33,"transform"],[85,45,51,32],[85,46,49,4],[86,0,53,4],[86,12,53,9,"_config"],[86,19,53,4],[86,22,53,19,"config"],[86,28,53,4],[87,0,54,4],[87,12,54,9,"_transform"],[87,22,54,4],[87,25,54,22,"transform"],[87,34,54,4],[88,0,48,33],[89,0,55,3],[93,33,57,13],[94,0,58,4],[94,43,58,37],[94,48,58,42,"__nodeID"],[94,56,58,4],[95,0,59,3],[98,37,61,17],[99,0,62,4],[99,15,62,11],[99,20,62,16,"_transform"],[99,30,62,11],[99,31,62,27,"map"],[99,34,62,11],[99,35,62,31],[99,45,62,31,"transform"],[99,54,62,40],[99,56,62,44],[100,0,63,6],[100,14,63,12,"result"],[100,20,63,18],[100,23,63,21],[100,25,63,6],[102,0,64,6],[102,15,64,11],[102,19,64,17,"key"],[102,22,64,6],[102,26,64,24,"transform"],[102,35,64,6],[102,37,64,35],[103,0,65,8],[103,16,65,14,"value"],[103,21,65,19],[103,24,65,22,"transform"],[103,33,65,31],[103,34,65,32,"key"],[103,37,65,31],[103,38,65,8],[105,0,66,8],[105,16,66,12,"value"],[105,21,66,17],[105,33,66,29,"AnimatedNode"],[105,55,66,8],[105,57,66,43],[106,0,67,10,"result"],[106,14,67,10,"result"],[106,20,67,16],[106,21,67,17,"key"],[106,24,67,16],[106,25,67,10],[106,28,67,24,"value"],[106,33,67,29],[106,34,67,30,"__getValue"],[106,44,67,24],[106,46,67,10],[107,0,68,9],[108,0,69,7],[110,0,70,6],[110,17,70,13,"result"],[110,23,70,6],[111,0,71,5],[111,9,62,11],[111,10,62,4],[112,0,72,3],[115,4,47,32,"AnimatedNode"],[115,26]],"functionMap":{"names":["<global>","sanitizeTransform","inputTransform.forEach$argument_0","extractAnimatedParentNodes","transform.forEach$argument_0","createOrReuseTransformNode","AnimatedTransform","constructor","toString","__onEvaluate","_transform.map$argument_0"],"mappings":"AAA;ACI;yBCE;GDe;CDE;AGE;oBCE;GDO;CHE;OKE;CLM;AME;ECC;GDO;EEE;GFE;EGE;+BCC;KDS;GHC;CNC"}},"type":"js/module"}]}