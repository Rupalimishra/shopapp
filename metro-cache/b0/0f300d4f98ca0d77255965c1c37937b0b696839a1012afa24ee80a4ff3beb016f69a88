{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"./utils/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./utils/invariant\"));\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var StateUtils = {\n    get: function get(state, key) {\n      return state.routes.find(function (route) {\n        return route.key === key;\n      }) || null;\n    },\n    indexOf: function indexOf(state, key) {\n      return state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n    },\n    has: function has(state, key) {\n      return !!state.routes.some(function (route) {\n        return route.key === key;\n      });\n    },\n    push: function push(state, route) {\n      (0, _invariant.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n      var routes = state.routes.slice();\n      routes.push(route);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    pop: function pop(state) {\n      if (state.index <= 0) {\n        return state;\n      }\n\n      var routes = state.routes.slice(0, -1);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    jumpToIndex: function jumpToIndex(state, index) {\n      if (index === state.index) {\n        return state;\n      }\n\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s to jump to', index);\n      return _objectSpread({}, state, {\n        index: index\n      });\n    },\n    jumpTo: function jumpTo(state, key) {\n      var index = StateUtils.indexOf(state, key);\n      return StateUtils.jumpToIndex(state, index);\n    },\n    back: function back(state) {\n      var index = state.index - 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    forward: function forward(state) {\n      var index = state.index + 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    replaceAndPrune: function replaceAndPrune(state, key, route) {\n      var index = StateUtils.indexOf(state, key);\n      var replaced = StateUtils.replaceAtIndex(state, index, route);\n      return _objectSpread({}, replaced, {\n        routes: replaced.routes.slice(0, index + 1)\n      });\n    },\n    replaceAt: function replaceAt(state, key, route) {\n      var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var index = StateUtils.indexOf(state, key);\n      var nextIndex = preserveIndex ? state.index : index;\n      var nextState = StateUtils.replaceAtIndex(state, index, route);\n      nextState.index = nextIndex;\n      return nextState;\n    },\n    replaceAtIndex: function replaceAtIndex(state, index, route) {\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n      if (state.routes[index] === route && index === state.index) {\n        return state;\n      }\n\n      var routes = state.routes.slice();\n      routes[index] = route;\n      return _objectSpread({}, state, {\n        index: index,\n        routes: routes\n      });\n    },\n    reset: function reset(state, routes, index) {\n      (0, _invariant.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');\n      var nextIndex = index === undefined ? routes.length - 1 : index;\n\n      if (state.routes.length === routes.length && state.index === nextIndex) {\n        var compare = function compare(route, ii) {\n          return routes[ii] === route;\n        };\n\n        if (state.routes.every(compare)) {\n          return state;\n        }\n      }\n\n      (0, _invariant.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n      return _objectSpread({}, state, {\n        index: nextIndex,\n        routes: routes\n      });\n    }\n  };\n  var _default = StateUtils;\n  exports.default = _default;\n});","lineCount":172,"map":[[9,0,7,0],[11,0,1,0],[11,11,1,9,"ownKeys"],[11,18,1,0],[11,19,1,17,"object"],[11,25,1,0],[11,27,1,25,"enumerableOnly"],[11,41,1,0],[11,43,1,41],[12,0,1,43],[12,8,1,47,"keys"],[12,12,1,51],[12,15,1,54,"Object"],[12,21,1,60],[12,22,1,61,"keys"],[12,26,1,54],[12,27,1,66,"object"],[12,33,1,54],[12,34,1,43],[14,0,1,75],[14,8,1,79,"Object"],[14,14,1,85],[14,15,1,86,"getOwnPropertySymbols"],[14,36,1,75],[14,38,1,109],[15,0,1,111],[15,10,1,115,"symbols"],[15,17,1,122],[15,20,1,125,"Object"],[15,26,1,131],[15,27,1,132,"getOwnPropertySymbols"],[15,48,1,125],[15,49,1,154,"object"],[15,55,1,125],[15,56,1,111],[16,0,1,163],[16,10,1,167,"enumerableOnly"],[16,24,1,163],[16,26,1,183,"symbols"],[16,33,1,190],[16,36,1,193,"symbols"],[16,43,1,200],[16,44,1,201,"filter"],[16,50,1,193],[16,51,1,208],[16,61,1,218,"sym"],[16,64,1,208],[16,66,1,223],[17,0,1,225],[17,15,1,232,"Object"],[17,21,1,238],[17,22,1,239,"getOwnPropertyDescriptor"],[17,46,1,232],[17,47,1,264,"object"],[17,53,1,232],[17,55,1,272,"sym"],[17,58,1,232],[17,60,1,277,"enumerable"],[17,70,1,225],[18,0,1,290],[18,7,1,193],[18,8,1,183],[19,0,1,293,"keys"],[19,6,1,293,"keys"],[19,10,1,297],[19,11,1,298,"push"],[19,15,1,293],[19,16,1,303,"apply"],[19,21,1,293],[19,22,1,309,"keys"],[19,26,1,293],[19,28,1,315,"symbols"],[19,35,1,293],[20,0,1,326],[22,0,1,327],[22,11,1,334,"keys"],[22,15,1,327],[23,0,1,341],[25,0,3,0],[25,11,3,9,"_objectSpread"],[25,24,3,0],[25,25,3,23,"target"],[25,31,3,0],[25,33,3,31],[26,0,3,33],[26,9,3,38],[26,13,3,42,"i"],[26,14,3,43],[26,17,3,46],[26,18,3,33],[26,20,3,49,"i"],[26,21,3,50],[26,24,3,53,"arguments"],[26,33,3,62],[26,34,3,63,"length"],[26,40,3,33],[26,42,3,71,"i"],[26,43,3,72],[26,45,3,33],[26,47,3,76],[27,0,3,78],[27,10,3,82,"source"],[27,16,3,88],[27,19,3,91,"arguments"],[27,28,3,100],[27,29,3,101,"i"],[27,30,3,100],[27,31,3,91],[27,35,3,107],[27,39,3,91],[27,42,3,114,"arguments"],[27,51,3,123],[27,52,3,124,"i"],[27,53,3,123],[27,54,3,91],[27,57,3,129],[27,59,3,78],[29,0,3,133],[29,10,3,137,"i"],[29,11,3,138],[29,14,3,141],[29,15,3,133],[29,17,3,144],[30,0,3,146,"ownKeys"],[30,8,3,146,"ownKeys"],[30,15,3,153],[30,16,3,154,"Object"],[30,22,3,160],[30,23,3,161,"source"],[30,29,3,160],[30,30,3,153],[30,32,3,170],[30,36,3,153],[30,37,3,146],[30,38,3,176,"forEach"],[30,45,3,146],[30,46,3,184],[30,56,3,194,"key"],[30,59,3,184],[30,61,3,199],[31,0,3,201,"_defineProperty"],[31,10,3,201,"_defineProperty"],[31,25,3,216],[31,26,3,217,"target"],[31,32,3,216],[31,34,3,225,"key"],[31,37,3,216],[31,39,3,230,"source"],[31,45,3,236],[31,46,3,237,"key"],[31,49,3,236],[31,50,3,216],[31,51,3,201],[32,0,3,245],[32,9,3,146],[33,0,3,249],[33,7,3,133],[33,13,3,255],[33,17,3,259,"Object"],[33,23,3,265],[33,24,3,266,"getOwnPropertyDescriptors"],[33,49,3,255],[33,51,3,293],[34,0,3,295,"Object"],[34,8,3,295,"Object"],[34,14,3,301],[34,15,3,302,"defineProperties"],[34,31,3,295],[34,32,3,319,"target"],[34,38,3,295],[34,40,3,327,"Object"],[34,46,3,333],[34,47,3,334,"getOwnPropertyDescriptors"],[34,72,3,327],[34,73,3,360,"source"],[34,79,3,327],[34,80,3,295],[35,0,3,371],[35,7,3,255],[35,13,3,377],[36,0,3,379,"ownKeys"],[36,8,3,379,"ownKeys"],[36,15,3,386],[36,16,3,387,"Object"],[36,22,3,393],[36,23,3,394,"source"],[36,29,3,393],[36,30,3,386],[36,31,3,379],[36,32,3,403,"forEach"],[36,39,3,379],[36,40,3,411],[36,50,3,421,"key"],[36,53,3,411],[36,55,3,426],[37,0,3,428,"Object"],[37,10,3,428,"Object"],[37,16,3,434],[37,17,3,435,"defineProperty"],[37,31,3,428],[37,32,3,450,"target"],[37,38,3,428],[37,40,3,458,"key"],[37,43,3,428],[37,45,3,463,"Object"],[37,51,3,469],[37,52,3,470,"getOwnPropertyDescriptor"],[37,76,3,463],[37,77,3,495,"source"],[37,83,3,463],[37,85,3,503,"key"],[37,88,3,463],[37,89,3,428],[38,0,3,511],[38,9,3,379],[39,0,3,515],[40,0,3,517],[42,0,3,518],[42,11,3,525,"target"],[42,17,3,518],[43,0,3,534],[45,0,5,0],[45,11,5,9,"_defineProperty"],[45,26,5,0],[45,27,5,25,"obj"],[45,30,5,0],[45,32,5,30,"key"],[45,35,5,0],[45,37,5,35,"value"],[45,42,5,0],[45,44,5,42],[46,0,5,44],[46,8,5,48,"key"],[46,11,5,51],[46,15,5,55,"obj"],[46,18,5,44],[46,20,5,60],[47,0,5,62,"Object"],[47,6,5,62,"Object"],[47,12,5,68],[47,13,5,69,"defineProperty"],[47,27,5,62],[47,28,5,84,"obj"],[47,31,5,62],[47,33,5,89,"key"],[47,36,5,62],[47,38,5,94],[48,0,5,96,"value"],[48,8,5,96,"value"],[48,13,5,101],[48,15,5,103,"value"],[48,20,5,94],[49,0,5,110,"enumerable"],[49,8,5,110,"enumerable"],[49,18,5,120],[49,20,5,122],[49,24,5,94],[50,0,5,128,"configurable"],[50,8,5,128,"configurable"],[50,20,5,140],[50,22,5,142],[50,26,5,94],[51,0,5,148,"writable"],[51,8,5,148,"writable"],[51,16,5,156],[51,18,5,158],[52,0,5,94],[52,7,5,62],[53,0,5,168],[53,5,5,44],[53,11,5,174],[54,0,5,176,"obj"],[54,6,5,176,"obj"],[54,9,5,179],[54,10,5,180,"key"],[54,13,5,179],[54,14,5,176],[54,17,5,187,"value"],[54,22,5,176],[55,0,5,195],[57,0,5,196],[57,11,5,203,"obj"],[57,14,5,196],[58,0,5,209],[60,0,17,0],[60,6,17,6,"StateUtils"],[60,16,17,16],[60,19,17,19],[61,0,21,2,"get"],[61,4,21,2,"get"],[61,7,17,19],[61,22,21,6,"state"],[61,27,17,19],[61,29,21,13,"key"],[61,32,17,19],[61,34,21,18],[62,0,22,4],[62,13,22,11,"state"],[62,18,22,16],[62,19,22,17,"routes"],[62,25,22,11],[62,26,22,24,"find"],[62,30,22,11],[62,31,22,29],[62,41,22,29,"route"],[62,46,22,34],[63,0,22,34],[63,15,22,38,"route"],[63,20,22,43],[63,21,22,44,"key"],[63,24,22,38],[63,29,22,52,"key"],[63,32,22,34],[64,0,22,34],[64,7,22,11],[64,12,22,60],[64,16,22,4],[65,0,23,3],[65,5,17,19],[66,0,29,2,"indexOf"],[66,4,29,2,"indexOf"],[66,11,17,19],[66,30,29,10,"state"],[66,35,17,19],[66,37,29,17,"key"],[66,40,17,19],[66,42,29,22],[67,0,30,4],[67,13,30,11,"state"],[67,18,30,16],[67,19,30,17,"routes"],[67,25,30,11],[67,26,30,24,"findIndex"],[67,35,30,11],[67,36,30,34],[67,46,30,34,"route"],[67,51,30,39],[68,0,30,39],[68,15,30,43,"route"],[68,20,30,48],[68,21,30,49,"key"],[68,24,30,43],[68,29,30,57,"key"],[68,32,30,39],[69,0,30,39],[69,7,30,11],[69,8,30,4],[70,0,31,3],[70,5,17,19],[71,0,37,2,"has"],[71,4,37,2,"has"],[71,7,17,19],[71,22,37,6,"state"],[71,27,17,19],[71,29,37,13,"key"],[71,32,17,19],[71,34,37,18],[72,0,38,4],[72,13,38,11],[72,14,38,12],[72,15,38,13,"state"],[72,20,38,18],[72,21,38,19,"routes"],[72,27,38,13],[72,28,38,26,"some"],[72,32,38,13],[72,33,38,31],[72,43,38,31,"route"],[72,48,38,36],[73,0,38,36],[73,15,38,40,"route"],[73,20,38,45],[73,21,38,46,"key"],[73,24,38,40],[73,29,38,54,"key"],[73,32,38,36],[74,0,38,36],[74,7,38,13],[74,8,38,4],[75,0,39,3],[75,5,17,19],[76,0,46,2,"push"],[76,4,46,2,"push"],[76,8,17,19],[76,24,46,7,"state"],[76,29,17,19],[76,31,46,14,"route"],[76,36,17,19],[76,38,46,21],[77,0,47,4],[77,30,47,14,"StateUtils"],[77,40,47,24],[77,41,47,25,"indexOf"],[77,48,47,14],[77,49,47,33,"state"],[77,54,47,14],[77,56,47,40,"route"],[77,61,47,45],[77,62,47,46,"key"],[77,65,47,14],[77,71,47,55],[77,72,47,56],[77,73,47,4],[77,75,47,59],[77,121,47,4],[77,123,47,107,"route"],[77,128,47,112],[77,129,47,113,"key"],[77,132,47,4],[78,0,48,4],[78,10,48,10,"routes"],[78,16,48,16],[78,19,48,19,"state"],[78,24,48,24],[78,25,48,25,"routes"],[78,31,48,19],[78,32,48,32,"slice"],[78,37,48,19],[78,39,48,4],[79,0,49,4,"routes"],[79,6,49,4,"routes"],[79,12,49,10],[79,13,49,11,"push"],[79,17,49,4],[79,18,49,16,"route"],[79,23,49,4],[80,0,50,4],[80,13,50,11,"_objectSpread"],[80,26,50,24],[80,27,50,25],[80,29,50,24],[80,31,50,29,"state"],[80,36,50,24],[80,38,50,36],[81,0,51,6,"index"],[81,8,51,6,"index"],[81,13,51,11],[81,15,51,13,"routes"],[81,21,51,19],[81,22,51,20,"length"],[81,28,51,13],[81,31,51,29],[81,32,50,36],[82,0,52,6,"routes"],[82,8,52,6,"routes"],[82,14,52,12],[82,16,52,6,"routes"],[83,0,50,36],[83,7,50,24],[83,8,50,4],[84,0,54,3],[84,5,17,19],[85,0,61,2,"pop"],[85,4,61,2,"pop"],[85,7,17,19],[85,22,61,6,"state"],[85,27,17,19],[85,29,61,13],[86,0,62,4],[86,10,62,8,"state"],[86,15,62,13],[86,16,62,14,"index"],[86,21,62,8],[86,25,62,23],[86,26,62,4],[86,28,62,26],[87,0,64,6],[87,15,64,13,"state"],[87,20,64,6],[88,0,65,5],[90,0,67,4],[90,10,67,10,"routes"],[90,16,67,16],[90,19,67,19,"state"],[90,24,67,24],[90,25,67,25,"routes"],[90,31,67,19],[90,32,67,32,"slice"],[90,37,67,19],[90,38,67,38],[90,39,67,19],[90,41,67,41],[90,42,67,42],[90,43,67,19],[90,44,67,4],[91,0,68,4],[91,13,68,11,"_objectSpread"],[91,26,68,24],[91,27,68,25],[91,29,68,24],[91,31,68,29,"state"],[91,36,68,24],[91,38,68,36],[92,0,69,6,"index"],[92,8,69,6,"index"],[92,13,69,11],[92,15,69,13,"routes"],[92,21,69,19],[92,22,69,20,"length"],[92,28,69,13],[92,31,69,29],[92,32,68,36],[93,0,70,6,"routes"],[93,8,70,6,"routes"],[93,14,70,12],[93,16,70,6,"routes"],[94,0,68,36],[94,7,68,24],[94,8,68,4],[95,0,72,3],[95,5,17,19],[96,0,77,2,"jumpToIndex"],[96,4,77,2,"jumpToIndex"],[96,15,17,19],[96,38,77,14,"state"],[96,43,17,19],[96,45,77,21,"index"],[96,50,17,19],[96,52,77,28],[97,0,78,4],[97,10,78,8,"index"],[97,15,78,13],[97,20,78,18,"state"],[97,25,78,23],[97,26,78,24,"index"],[97,31,78,4],[97,33,78,31],[98,0,79,6],[98,15,79,13,"state"],[98,20,79,6],[99,0,80,5],[101,0,82,4],[101,30,82,14],[101,31,82,15],[101,32,82,16,"state"],[101,37,82,21],[101,38,82,22,"routes"],[101,44,82,16],[101,45,82,29,"index"],[101,50,82,16],[101,51,82,4],[101,53,82,37],[101,82,82,4],[101,84,82,68,"index"],[101,89,82,4],[102,0,83,4],[102,13,83,11,"_objectSpread"],[102,26,83,24],[102,27,83,25],[102,29,83,24],[102,31,83,29,"state"],[102,36,83,24],[102,38,83,36],[103,0,84,6,"index"],[103,8,84,6,"index"],[103,13,84,11],[103,15,84,6,"index"],[104,0,83,36],[104,7,83,24],[104,8,83,4],[105,0,86,3],[105,5,17,19],[106,0,91,2,"jumpTo"],[106,4,91,2,"jumpTo"],[106,10,17,19],[106,28,91,9,"state"],[106,33,17,19],[106,35,91,16,"key"],[106,38,17,19],[106,40,91,21],[107,0,92,4],[107,10,92,10,"index"],[107,15,92,15],[107,18,92,18,"StateUtils"],[107,28,92,28],[107,29,92,29,"indexOf"],[107,36,92,18],[107,37,92,37,"state"],[107,42,92,18],[107,44,92,44,"key"],[107,47,92,18],[107,48,92,4],[108,0,93,4],[108,13,93,11,"StateUtils"],[108,23,93,21],[108,24,93,22,"jumpToIndex"],[108,35,93,11],[108,36,93,34,"state"],[108,41,93,11],[108,43,93,41,"index"],[108,48,93,11],[108,49,93,4],[109,0,94,3],[109,5,17,19],[110,0,99,2,"back"],[110,4,99,2,"back"],[110,8,17,19],[110,24,99,7,"state"],[110,29,17,19],[110,31,99,14],[111,0,100,4],[111,10,100,10,"index"],[111,15,100,15],[111,18,100,18,"state"],[111,23,100,23],[111,24,100,24,"index"],[111,29,100,18],[111,32,100,32],[111,33,100,4],[112,0,101,4],[112,10,101,10,"route"],[112,15,101,15],[112,18,101,18,"state"],[112,23,101,23],[112,24,101,24,"routes"],[112,30,101,18],[112,31,101,31,"index"],[112,36,101,18],[112,37,101,4],[113,0,102,4],[113,13,102,11,"route"],[113,18,102,16],[113,21,102,19,"StateUtils"],[113,31,102,29],[113,32,102,30,"jumpToIndex"],[113,43,102,19],[113,44,102,42,"state"],[113,49,102,19],[113,51,102,49,"index"],[113,56,102,19],[113,57,102,16],[113,60,102,58,"state"],[113,65,102,4],[114,0,103,3],[114,5,17,19],[115,0,108,2,"forward"],[115,4,108,2,"forward"],[115,11,17,19],[115,30,108,10,"state"],[115,35,17,19],[115,37,108,17],[116,0,109,4],[116,10,109,10,"index"],[116,15,109,15],[116,18,109,18,"state"],[116,23,109,23],[116,24,109,24,"index"],[116,29,109,18],[116,32,109,32],[116,33,109,4],[117,0,110,4],[117,10,110,10,"route"],[117,15,110,15],[117,18,110,18,"state"],[117,23,110,23],[117,24,110,24,"routes"],[117,30,110,18],[117,31,110,31,"index"],[117,36,110,18],[117,37,110,4],[118,0,111,4],[118,13,111,11,"route"],[118,18,111,16],[118,21,111,19,"StateUtils"],[118,31,111,29],[118,32,111,30,"jumpToIndex"],[118,43,111,19],[118,44,111,42,"state"],[118,49,111,19],[118,51,111,49,"index"],[118,56,111,19],[118,57,111,16],[118,60,111,58,"state"],[118,65,111,4],[119,0,112,3],[119,5,17,19],[120,0,119,2,"replaceAndPrune"],[120,4,119,2,"replaceAndPrune"],[120,19,17,19],[120,46,119,18,"state"],[120,51,17,19],[120,53,119,25,"key"],[120,56,17,19],[120,58,119,30,"route"],[120,63,17,19],[120,65,119,37],[121,0,120,4],[121,10,120,10,"index"],[121,15,120,15],[121,18,120,18,"StateUtils"],[121,28,120,28],[121,29,120,29,"indexOf"],[121,36,120,18],[121,37,120,37,"state"],[121,42,120,18],[121,44,120,44,"key"],[121,47,120,18],[121,48,120,4],[122,0,121,4],[122,10,121,10,"replaced"],[122,18,121,18],[122,21,121,21,"StateUtils"],[122,31,121,31],[122,32,121,32,"replaceAtIndex"],[122,46,121,21],[122,47,121,47,"state"],[122,52,121,21],[122,54,121,54,"index"],[122,59,121,21],[122,61,121,61,"route"],[122,66,121,21],[122,67,121,4],[123,0,122,4],[123,13,122,11,"_objectSpread"],[123,26,122,24],[123,27,122,25],[123,29,122,24],[123,31,122,29,"replaced"],[123,39,122,24],[123,41,122,39],[124,0,123,6,"routes"],[124,8,123,6,"routes"],[124,14,123,12],[124,16,123,14,"replaced"],[124,24,123,22],[124,25,123,23,"routes"],[124,31,123,14],[124,32,123,30,"slice"],[124,37,123,14],[124,38,123,36],[124,39,123,14],[124,41,123,39,"index"],[124,46,123,44],[124,49,123,47],[124,50,123,14],[125,0,122,39],[125,7,122,24],[125,8,122,4],[126,0,125,3],[126,5,17,19],[127,0,134,2,"replaceAt"],[127,4,134,2,"replaceAt"],[127,13,17,19],[127,34,134,12,"state"],[127,39,17,19],[127,41,134,19,"key"],[127,44,17,19],[127,46,134,24,"route"],[127,51,17,19],[127,53,134,54],[128,0,134,54],[128,10,134,31,"preserveIndex"],[128,23,134,54],[128,94,134,47],[128,99,134,54],[129,0,135,4],[129,10,135,10,"index"],[129,15,135,15],[129,18,135,18,"StateUtils"],[129,28,135,28],[129,29,135,29,"indexOf"],[129,36,135,18],[129,37,135,37,"state"],[129,42,135,18],[129,44,135,44,"key"],[129,47,135,18],[129,48,135,4],[130,0,136,4],[130,10,136,10,"nextIndex"],[130,19,136,19],[130,22,136,22,"preserveIndex"],[130,35,136,35],[130,38,136,38,"state"],[130,43,136,43],[130,44,136,44,"index"],[130,49,136,35],[130,52,136,52,"index"],[130,57,136,4],[131,0,137,4],[131,10,137,8,"nextState"],[131,19,137,17],[131,22,137,20,"StateUtils"],[131,32,137,30],[131,33,137,31,"replaceAtIndex"],[131,47,137,20],[131,48,137,46,"state"],[131,53,137,20],[131,55,137,53,"index"],[131,60,137,20],[131,62,137,60,"route"],[131,67,137,20],[131,68,137,4],[132,0,138,4,"nextState"],[132,6,138,4,"nextState"],[132,15,138,13],[132,16,138,14,"index"],[132,21,138,4],[132,24,138,22,"nextIndex"],[132,33,138,4],[133,0,139,4],[133,13,139,11,"nextState"],[133,22,139,4],[134,0,140,3],[134,5,17,19],[135,0,147,2,"replaceAtIndex"],[135,4,147,2,"replaceAtIndex"],[135,18,17,19],[135,44,147,17,"state"],[135,49,17,19],[135,51,147,24,"index"],[135,56,17,19],[135,58,147,31,"route"],[135,63,17,19],[135,65,147,38],[136,0,148,4],[136,30,148,14],[136,31,148,15],[136,32,148,16,"state"],[136,37,148,21],[136,38,148,22,"routes"],[136,44,148,16],[136,45,148,29,"index"],[136,50,148,16],[136,51,148,4],[136,53,148,37],[136,94,148,4],[136,96,148,80,"index"],[136,101,148,4],[136,103,148,87,"route"],[136,108,148,92],[136,109,148,93,"key"],[136,112,148,4],[138,0,150,4],[138,10,150,8,"state"],[138,15,150,13],[138,16,150,14,"routes"],[138,22,150,8],[138,23,150,21,"index"],[138,28,150,8],[138,34,150,32,"route"],[138,39,150,8],[138,43,150,41,"index"],[138,48,150,46],[138,53,150,51,"state"],[138,58,150,56],[138,59,150,57,"index"],[138,64,150,4],[138,66,150,64],[139,0,151,6],[139,15,151,13,"state"],[139,20,151,6],[140,0,152,5],[142,0,154,4],[142,10,154,10,"routes"],[142,16,154,16],[142,19,154,19,"state"],[142,24,154,24],[142,25,154,25,"routes"],[142,31,154,19],[142,32,154,32,"slice"],[142,37,154,19],[142,39,154,4],[143,0,155,4,"routes"],[143,6,155,4,"routes"],[143,12,155,10],[143,13,155,11,"index"],[143,18,155,10],[143,19,155,4],[143,22,155,20,"route"],[143,27,155,4],[144,0,156,4],[144,13,156,11,"_objectSpread"],[144,26,156,24],[144,27,156,25],[144,29,156,24],[144,31,156,29,"state"],[144,36,156,24],[144,38,156,36],[145,0,157,6,"index"],[145,8,157,6,"index"],[145,13,157,11],[145,15,157,6,"index"],[145,20,156,36],[146,0,158,6,"routes"],[146,8,158,6,"routes"],[146,14,158,12],[146,16,158,6,"routes"],[147,0,156,36],[147,7,156,24],[147,8,156,4],[148,0,160,3],[148,5,17,19],[149,0,167,2,"reset"],[149,4,167,2,"reset"],[149,9,17,19],[149,26,167,8,"state"],[149,31,17,19],[149,33,167,15,"routes"],[149,39,17,19],[149,41,167,23,"index"],[149,46,17,19],[149,48,167,30],[150,0,168,4],[150,30,168,14,"routes"],[150,36,168,20],[150,37,168,21,"length"],[150,43,168,14],[150,47,168,31,"Array"],[150,52,168,36],[150,53,168,37,"isArray"],[150,60,168,31],[150,61,168,45,"routes"],[150,67,168,31],[150,68,168,4],[150,70,168,54],[150,97,168,4],[151,0,169,4],[151,10,169,10,"nextIndex"],[151,19,169,19],[151,22,169,22,"index"],[151,27,169,27],[151,32,169,32,"undefined"],[151,41,169,22],[151,44,169,44,"routes"],[151,50,169,50],[151,51,169,51,"length"],[151,57,169,44],[151,60,169,60],[151,61,169,22],[151,64,169,64,"index"],[151,69,169,4],[153,0,171,4],[153,10,171,8,"state"],[153,15,171,13],[153,16,171,14,"routes"],[153,22,171,8],[153,23,171,21,"length"],[153,29,171,8],[153,34,171,32,"routes"],[153,40,171,38],[153,41,171,39,"length"],[153,47,171,8],[153,51,171,49,"state"],[153,56,171,54],[153,57,171,55,"index"],[153,62,171,49],[153,67,171,65,"nextIndex"],[153,76,171,4],[153,78,171,76],[154,0,172,6],[154,12,172,12,"compare"],[154,19,172,19],[154,22,172,22],[154,31,172,12,"compare"],[154,38,172,22],[154,39,172,23,"route"],[154,44,172,22],[154,46,172,30,"ii"],[154,48,172,22],[155,0,172,22],[155,17,172,37,"routes"],[155,23,172,43],[155,24,172,44,"ii"],[155,26,172,43],[155,27,172,37],[155,32,172,52,"route"],[155,37,172,22],[156,0,172,22],[156,9,172,6],[158,0,174,6],[158,12,174,10,"state"],[158,17,174,15],[158,18,174,16,"routes"],[158,24,174,10],[158,25,174,23,"every"],[158,30,174,10],[158,31,174,29,"compare"],[158,38,174,10],[158,39,174,6],[158,41,174,39],[159,0,175,8],[159,17,175,15,"state"],[159,22,175,8],[160,0,176,7],[161,0,177,5],[163,0,179,4],[163,30,179,14],[163,31,179,15],[163,32,179,16,"routes"],[163,38,179,22],[163,39,179,23,"nextIndex"],[163,48,179,22],[163,49,179,4],[163,51,179,35],[163,78,179,4],[163,80,179,64,"nextIndex"],[163,89,179,4],[164,0,180,4],[164,13,180,11,"_objectSpread"],[164,26,180,24],[164,27,180,25],[164,29,180,24],[164,31,180,29,"state"],[164,36,180,24],[164,38,180,36],[165,0,181,6,"index"],[165,8,181,6,"index"],[165,13,181,11],[165,15,181,13,"nextIndex"],[165,24,180,36],[166,0,182,6,"routes"],[166,8,182,6,"routes"],[166,14,182,12],[166,16,182,6,"routes"],[167,0,180,36],[167,7,180,24],[167,8,180,4],[168,0,184,3],[169,0,17,19],[169,3,17,0],[170,17,187,15,"StateUtils"],[170,27]],"functionMap":{"names":["ownKeys","symbols.filter$argument_0","<global>","_objectSpread","ownKeys.forEach$argument_0","_defineProperty","get","state.routes.find$argument_0","indexOf","state.routes.findIndex$argument_0","has","state.routes.some$argument_0","push","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaceAt","replaceAtIndex","reset","compare"],"mappings":"AAA,gNC,kFD,mDE;ACE,wLC,6DD,sKC,oGD,uBD;AGE,iNH;EIgB;6BCC,0BD;GJC;EMM;kCCC,0BD;GNC;EQM;+BCC,0BD;GRC;EUO;GVQ;EWO;GXW;EYK;GZS;EaK;GbG;EcK;GdI;EeK;GfI;EgBO;GhBM;EiBS;GjBM;EkBO;GlBa;EmBO;sBCK,mCD;GnBY"}},"type":"js/module"}]}